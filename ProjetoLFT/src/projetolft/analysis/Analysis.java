/* This file was generated by SableCC (http://www.sablecc.org/). */

package projetolft.analysis;

import projetolft.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramaEst(AProgramaEst node);
    void caseADeclmDeclaracao(ADeclmDeclaracao node);
    void caseAConstDeclaracao(AConstDeclaracao node);
    void caseADeclMDeclM(ADeclMDeclM node);
    void caseAVarDeclM(AVarDeclM node);
    void caseAVarNVariavel(AVarNVariavel node);
    void caseAVarVVariavel(AVarVVariavel node);
    void caseADeclComando(ADeclComando node);
    void caseAAtribuiComando(AAtribuiComando node);
    void caseALeiaComando(ALeiaComando node);
    void caseAEscreverComando(AEscreverComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAParaComando(AParaComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseASeComando(ASeComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAComando(AComando node);
    void caseANumIntValor(ANumIntValor node);
    void caseANumRealValor(ANumRealValor node);
    void caseACharValor(ACharValor node);
    void caseANumeroRealTipoVariavel(ANumeroRealTipoVariavel node);
    void caseANumIntTipoVariavel(ANumIntTipoVariavel node);
    void caseACaractereTipoVariavel(ACaractereTipoVariavel node);
    void caseAAtribui(AAtribui node);
    void caseALeiaEst(ALeiaEst node);
    void caseALeiaMLeiaM(ALeiaMLeiaM node);
    void caseAVarLeiaM(AVarLeiaM node);
    void caseAEscrevaEst(AEscrevaEst node);
    void caseAEscMEscrevaM(AEscMEscrevaM node);
    void caseAExpEscrevaM(AExpEscrevaM node);
    void caseAMaisExp(AMaisExp node);
    void caseAMenosExp(AMenosExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseAVariavelExp(AVariavelExp node);
    void caseAValorExp(AValorExp node);
    void caseAMenosExpExp(AMenosExpExp node);
    void caseATermoExpA(ATermoExpA node);
    void caseAMaisExpA(AMaisExpA node);
    void caseAVarExpA(AVarExpA node);
    void caseAMaisSomaA(AMaisSomaA node);
    void caseAMenosSomaA(AMenosSomaA node);
    void caseAFatTermoA(AFatTermoA node);
    void caseAMultTermoA(AMultTermoA node);
    void caseAMultMultA(AMultMultA node);
    void caseADivMultA(ADivMultA node);
    void caseAExpressaoFatorA(AExpressaoFatorA node);
    void caseAValorFatorA(AValorFatorA node);
    void caseAMenosFatorA(AMenosFatorA node);
    void caseAMultipleExplogica(AMultipleExplogica node);
    void caseAExExplogica(AExExplogica node);
    void caseASingleExplogica(ASingleExplogica node);
    void caseAMultipleExpOu(AMultipleExpOu node);
    void caseAExppExpOu(AExppExpOu node);
    void caseASingleExpOu(ASingleExpOu node);
    void caseAMultipleExpXor(AMultipleExpXor node);
    void caseAFatExpXor(AFatExpXor node);
    void caseASingleAuxXor(ASingleAuxXor node);
    void caseAFatAuxXor(AFatAuxXor node);
    void caseAExigExplFator(AExigExplFator node);
    void caseAOutroExplFator(AOutroExplFator node);
    void caseAExdifExplFator(AExdifExplFator node);
    void caseAMiExplTermo(AMiExplTermo node);
    void caseAMeiExplTermo(AMeiExplTermo node);
    void caseAMqExplTermo(AMqExplTermo node);
    void caseAMeqExplTermo(AMeqExplTermo node);
    void caseASingleExplTermo(ASingleExplTermo node);
    void caseAUnicaExplTermo(AUnicaExplTermo node);
    void caseAMultiplaIgExplTermo(AMultiplaIgExplTermo node);
    void caseAMultiplaDifExplTermo(AMultiplaDifExplTermo node);
    void caseARepitaEst(ARepitaEst node);
    void caseAForParaEst(AForParaEst node);
    void caseAForPassoParaEst(AForPassoParaEst node);
    void caseAFor1(AFor1 node);
    void caseAFor2(AFor2 node);
    void caseAEnquantoEst(AEnquantoEst node);
    void caseAIfSeEst(AIfSeEst node);
    void caseAElseSeEst(AElseSeEst node);
    void caseASeSen(ASeSen node);
    void caseANormalAvalieEst(ANormalAvalieEst node);
    void caseAElseAvalieEst(AElseAvalieEst node);
    void caseACasoCasoM(ACasoCasoM node);
    void caseACasoM(ACasoM node);

    void caseTVirgula(TVirgula node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTPonto(TPonto node);
    void caseTParenEsq(TParenEsq node);
    void caseTParenDir(TParenDir node);
    void caseTColcheteEsq(TColcheteEsq node);
    void caseTColcheteDir(TColcheteDir node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivInt(TDivInt node);
    void caseTMenorQue(TMenorQue node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaiorQue(TMaiorQue node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTFaca(TFaca node);
    void caseTAte(TAte node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTEnquanto(TEnquanto node);
    void caseTConstante(TConstante node);
    void caseTPara(TPara node);
    void caseTRepita(TRepita node);
    void caseTInicio(TInicio node);
    void caseTPrograma(TPrograma node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTCaractere(TCaractere node);
    void caseTSe(TSe node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTEntao(TEntao node);
    void caseTAvalie(TAvalie node);
    void caseTSenao(TSenao node);
    void caseTCaso(TCaso node);
    void caseTFimP(TFimP node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTFimSe(TFimSe node);
    void caseTFimPara(TFimPara node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTNao(TNao node);
    void caseTBlanks(TBlanks node);
    void caseTNumeroInt(TNumeroInt node);
    void caseTNumeroReal(TNumeroReal node);
    void caseTString(TString node);
    void caseTIdentificador(TIdentificador node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentadoA(TComentadoA node);
    void caseTCorpo(TCorpo node);
    void caseTEstrela(TEstrela node);
    void caseTBarra(TBarra node);
    void caseTComentadoFinal(TComentadoFinal node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
