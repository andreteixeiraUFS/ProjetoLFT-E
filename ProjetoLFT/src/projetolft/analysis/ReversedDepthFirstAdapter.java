/* This file was generated by SableCC (http://www.sablecc.org/). */

package projetolft.analysis;

import java.util.*;
import projetolft.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getProgramaEst() != null)
        {
            node.getProgramaEst().apply(this);
        }
        outAStartStart(node);
    }

    public void inAVazio(AVazio node)
    {
        defaultIn(node);
    }

    public void outAVazio(AVazio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazio(AVazio node)
    {
        inAVazio(node);
        outAVazio(node);
    }

    public void inAProgramaEst(AProgramaEst node)
    {
        defaultIn(node);
    }

    public void outAProgramaEst(AProgramaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaEst(AProgramaEst node)
    {
        inAProgramaEst(node);
        if(node.getFimP() != null)
        {
            node.getFimP().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgramaEst(node);
    }

    public void inADeclMDeclaracao(ADeclMDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclMDeclaracao(ADeclMDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclMDeclaracao(ADeclMDeclaracao node)
    {
        inADeclMDeclaracao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getDeclM() != null)
        {
            node.getDeclM().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipoVariavel() != null)
        {
            node.getTipoVariavel().apply(this);
        }
        outADeclMDeclaracao(node);
    }

    public void inADeclaracao(ADeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracao(ADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracao(ADeclaracao node)
    {
        inADeclaracao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outADeclaracao(node);
    }

    public void inADeclS(ADeclS node)
    {
        defaultIn(node);
    }

    public void outADeclS(ADeclS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclS(ADeclS node)
    {
        inADeclS(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outADeclS(node);
    }

    public void inADeclM(ADeclM node)
    {
        defaultIn(node);
    }

    public void outADeclM(ADeclM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclM(ADeclM node)
    {
        inADeclM(node);
        if(node.getDeclM() != null)
        {
            node.getDeclM().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outADeclM(node);
    }

    public void inADeclSDeclM(ADeclSDeclM node)
    {
        defaultIn(node);
    }

    public void outADeclSDeclM(ADeclSDeclM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclSDeclM(ADeclSDeclM node)
    {
        inADeclSDeclM(node);
        if(node.getDeclS() != null)
        {
            node.getDeclS().apply(this);
        }
        outADeclSDeclM(node);
    }

    public void inAVarNVariavel(AVarNVariavel node)
    {
        defaultIn(node);
    }

    public void outAVarNVariavel(AVarNVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarNVariavel(AVarNVariavel node)
    {
        inAVarNVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarNVariavel(node);
    }

    public void inAVarVVariavel(AVarVVariavel node)
    {
        defaultIn(node);
    }

    public void outAVarVVariavel(AVarVVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVVariavel(AVarVVariavel node)
    {
        inAVarVVariavel(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarVVariavel(node);
    }

    public void inANumIntValor(ANumIntValor node)
    {
        defaultIn(node);
    }

    public void outANumIntValor(ANumIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumIntValor(ANumIntValor node)
    {
        inANumIntValor(node);
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        outANumIntValor(node);
    }

    public void inANumRealValor(ANumRealValor node)
    {
        defaultIn(node);
    }

    public void outANumRealValor(ANumRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumRealValor(ANumRealValor node)
    {
        inANumRealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumRealValor(node);
    }

    public void inACharValor(ACharValor node)
    {
        defaultIn(node);
    }

    public void outACharValor(ACharValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValor(ACharValor node)
    {
        inACharValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outACharValor(node);
    }

    public void inANumeroRealTipoVariavel(ANumeroRealTipoVariavel node)
    {
        defaultIn(node);
    }

    public void outANumeroRealTipoVariavel(ANumeroRealTipoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealTipoVariavel(ANumeroRealTipoVariavel node)
    {
        inANumeroRealTipoVariavel(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outANumeroRealTipoVariavel(node);
    }

    public void inANumIntTipoVariavel(ANumIntTipoVariavel node)
    {
        defaultIn(node);
    }

    public void outANumIntTipoVariavel(ANumIntTipoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumIntTipoVariavel(ANumIntTipoVariavel node)
    {
        inANumIntTipoVariavel(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outANumIntTipoVariavel(node);
    }

    public void inACaractereTipoVariavel(ACaractereTipoVariavel node)
    {
        defaultIn(node);
    }

    public void outACaractereTipoVariavel(ACaractereTipoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipoVariavel(ACaractereTipoVariavel node)
    {
        inACaractereTipoVariavel(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipoVariavel(node);
    }

    public void inAAtribui(AAtribui node)
    {
        defaultIn(node);
    }

    public void outAAtribui(AAtribui node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribui(AAtribui node)
    {
        inAAtribui(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAAtribui(node);
    }

    public void inALeiaEst(ALeiaEst node)
    {
        defaultIn(node);
    }

    public void outALeiaEst(ALeiaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaEst(ALeiaEst node)
    {
        inALeiaEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getLeiaM() != null)
        {
            node.getLeiaM().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outALeiaEst(node);
    }

    public void inALeiaS(ALeiaS node)
    {
        defaultIn(node);
    }

    public void outALeiaS(ALeiaS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaS(ALeiaS node)
    {
        inALeiaS(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outALeiaS(node);
    }

    public void inALeiaM(ALeiaM node)
    {
        defaultIn(node);
    }

    public void outALeiaM(ALeiaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaM(ALeiaM node)
    {
        inALeiaM(node);
        if(node.getLeiaM() != null)
        {
            node.getLeiaM().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outALeiaM(node);
    }

    public void inALeiaSLeiaM(ALeiaSLeiaM node)
    {
        defaultIn(node);
    }

    public void outALeiaSLeiaM(ALeiaSLeiaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaSLeiaM(ALeiaSLeiaM node)
    {
        inALeiaSLeiaM(node);
        if(node.getLeiaS() != null)
        {
            node.getLeiaS().apply(this);
        }
        outALeiaSLeiaM(node);
    }

    public void inAEscrevaEst(AEscrevaEst node)
    {
        defaultIn(node);
    }

    public void outAEscrevaEst(AEscrevaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaEst(AEscrevaEst node)
    {
        inAEscrevaEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getEscrevaM() != null)
        {
            node.getEscrevaM().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAEscrevaEst(node);
    }

    public void inAEscrevaS(AEscrevaS node)
    {
        defaultIn(node);
    }

    public void outAEscrevaS(AEscrevaS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaS(AEscrevaS node)
    {
        inAEscrevaS(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAEscrevaS(node);
    }

    public void inAEscrevaM(AEscrevaM node)
    {
        defaultIn(node);
    }

    public void outAEscrevaM(AEscrevaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaM(AEscrevaM node)
    {
        inAEscrevaM(node);
        if(node.getEscrevaM() != null)
        {
            node.getEscrevaM().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAEscrevaM(node);
    }

    public void inAEscrevaSEscrevaM(AEscrevaSEscrevaM node)
    {
        defaultIn(node);
    }

    public void outAEscrevaSEscrevaM(AEscrevaSEscrevaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaSEscrevaM(AEscrevaSEscrevaM node)
    {
        inAEscrevaSEscrevaM(node);
        if(node.getEscrevaS() != null)
        {
            node.getEscrevaS().apply(this);
        }
        outAEscrevaSEscrevaM(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAExp1(AExp1 node)
    {
        defaultIn(node);
    }

    public void outAExp1(AExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1(AExp1 node)
    {
        inAExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        outAExp1(node);
    }

    public void inANadaExp1(ANadaExp1 node)
    {
        defaultIn(node);
    }

    public void outANadaExp1(ANadaExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaExp1(ANadaExp1 node)
    {
        inANadaExp1(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outANadaExp1(node);
    }

    public void inAMaisSoma(AMaisSoma node)
    {
        defaultIn(node);
    }

    public void outAMaisSoma(AMaisSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSoma(AMaisSoma node)
    {
        inAMaisSoma(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisSoma(node);
    }

    public void inAMenosSoma(AMenosSoma node)
    {
        defaultIn(node);
    }

    public void outAMenosSoma(AMenosSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSoma(AMenosSoma node)
    {
        inAMenosSoma(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosSoma(node);
    }

    public void inATermo(ATermo node)
    {
        defaultIn(node);
    }

    public void outATermo(ATermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo(ATermo node)
    {
        inATermo(node);
        if(node.getTermo1() != null)
        {
            node.getTermo1().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outATermo(node);
    }

    public void inATermo1(ATermo1 node)
    {
        defaultIn(node);
    }

    public void outATermo1(ATermo1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo1(ATermo1 node)
    {
        inATermo1(node);
        if(node.getTermo1() != null)
        {
            node.getTermo1().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outATermo1(node);
    }

    public void inANadaTermo1(ANadaTermo1 node)
    {
        defaultIn(node);
    }

    public void outANadaTermo1(ANadaTermo1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaTermo1(ANadaTermo1 node)
    {
        inANadaTermo1(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outANadaTermo1(node);
    }

    public void inAMultMult(AMultMult node)
    {
        defaultIn(node);
    }

    public void outAMultMult(AMultMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMult(AMultMult node)
    {
        inAMultMult(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultMult(node);
    }

    public void inADivMult(ADivMult node)
    {
        defaultIn(node);
    }

    public void outADivMult(ADivMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMult(ADivMult node)
    {
        inADivMult(node);
        if(node.getDivInt() != null)
        {
            node.getDivInt().apply(this);
        }
        outADivMult(node);
    }

    public void inAFator(AFator node)
    {
        defaultIn(node);
    }

    public void outAFator(AFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFator(AFator node)
    {
        inAFator(node);
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        outAFator(node);
    }

    public void inAValoorFator(AValoorFator node)
    {
        defaultIn(node);
    }

    public void outAValoorFator(AValoorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValoorFator(AValoorFator node)
    {
        inAValoorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValoorFator(node);
    }

    public void inATermoExpA(ATermoExpA node)
    {
        defaultIn(node);
    }

    public void outATermoExpA(ATermoExpA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpA(ATermoExpA node)
    {
        inATermoExpA(node);
        if(node.getTermoA() != null)
        {
            node.getTermoA().apply(this);
        }
        outATermoExpA(node);
    }

    public void inAMaisExpA(AMaisExpA node)
    {
        defaultIn(node);
    }

    public void outAMaisExpA(AMaisExpA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpA(AMaisExpA node)
    {
        inAMaisExpA(node);
        if(node.getTermoA() != null)
        {
            node.getTermoA().apply(this);
        }
        if(node.getSomaA() != null)
        {
            node.getSomaA().apply(this);
        }
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        outAMaisExpA(node);
    }

    public void inAVarExpA(AVarExpA node)
    {
        defaultIn(node);
    }

    public void outAVarExpA(AVarExpA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpA(AVarExpA node)
    {
        inAVarExpA(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarExpA(node);
    }

    public void inAMaisSomaA(AMaisSomaA node)
    {
        defaultIn(node);
    }

    public void outAMaisSomaA(AMaisSomaA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSomaA(AMaisSomaA node)
    {
        inAMaisSomaA(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisSomaA(node);
    }

    public void inAMenosSomaA(AMenosSomaA node)
    {
        defaultIn(node);
    }

    public void outAMenosSomaA(AMenosSomaA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSomaA(AMenosSomaA node)
    {
        inAMenosSomaA(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosSomaA(node);
    }

    public void inAFatTermoA(AFatTermoA node)
    {
        defaultIn(node);
    }

    public void outAFatTermoA(AFatTermoA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatTermoA(AFatTermoA node)
    {
        inAFatTermoA(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        outAFatTermoA(node);
    }

    public void inAMultTermoA(AMultTermoA node)
    {
        defaultIn(node);
    }

    public void outAMultTermoA(AMultTermoA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermoA(AMultTermoA node)
    {
        inAMultTermoA(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        if(node.getMultA() != null)
        {
            node.getMultA().apply(this);
        }
        if(node.getTermoA() != null)
        {
            node.getTermoA().apply(this);
        }
        outAMultTermoA(node);
    }

    public void inAMultMultA(AMultMultA node)
    {
        defaultIn(node);
    }

    public void outAMultMultA(AMultMultA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultA(AMultMultA node)
    {
        inAMultMultA(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultMultA(node);
    }

    public void inADivMultA(ADivMultA node)
    {
        defaultIn(node);
    }

    public void outADivMultA(ADivMultA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultA(ADivMultA node)
    {
        inADivMultA(node);
        if(node.getDivInt() != null)
        {
            node.getDivInt().apply(this);
        }
        outADivMultA(node);
    }

    public void inAExpressaoFatorA(AExpressaoFatorA node)
    {
        defaultIn(node);
    }

    public void outAExpressaoFatorA(AExpressaoFatorA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoFatorA(AExpressaoFatorA node)
    {
        inAExpressaoFatorA(node);
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        outAExpressaoFatorA(node);
    }

    public void inAValorFatorA(AValorFatorA node)
    {
        defaultIn(node);
    }

    public void outAValorFatorA(AValorFatorA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFatorA(AValorFatorA node)
    {
        inAValorFatorA(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFatorA(node);
    }

    public void inAMenosFatorA(AMenosFatorA node)
    {
        defaultIn(node);
    }

    public void outAMenosFatorA(AMenosFatorA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosFatorA(AMenosFatorA node)
    {
        inAMenosFatorA(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosFatorA(node);
    }

    public void inAExpTermoExp(AExpTermoExp node)
    {
        defaultIn(node);
    }

    public void outAExpTermoExp(AExpTermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTermoExp(AExpTermoExp node)
    {
        inAExpTermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        outAExpTermoExp(node);
    }

    public void inAExp1TermoExp(AExp1TermoExp node)
    {
        defaultIn(node);
    }

    public void outAExp1TermoExp(AExp1TermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1TermoExp(AExp1TermoExp node)
    {
        inAExp1TermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAExp1TermoExp(node);
    }

    public void inAExp2TermoExp(AExp2TermoExp node)
    {
        defaultIn(node);
    }

    public void outAExp2TermoExp(AExp2TermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2TermoExp(AExp2TermoExp node)
    {
        inAExp2TermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAExp2TermoExp(node);
    }

    public void inAExp3TermoExp(AExp3TermoExp node)
    {
        defaultIn(node);
    }

    public void outAExp3TermoExp(AExp3TermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3TermoExp(AExp3TermoExp node)
    {
        inAExp3TermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAExp3TermoExp(node);
    }

    public void inAExp4TermoExp(AExp4TermoExp node)
    {
        defaultIn(node);
    }

    public void outAExp4TermoExp(AExp4TermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4TermoExp(AExp4TermoExp node)
    {
        inAExp4TermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAExp4TermoExp(node);
    }

    public void inAExp5TermoExp(AExp5TermoExp node)
    {
        defaultIn(node);
    }

    public void outAExp5TermoExp(AExp5TermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp5TermoExp(AExp5TermoExp node)
    {
        inAExp5TermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        if(node.getMenorQue() != null)
        {
            node.getMenorQue().apply(this);
        }
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAExp5TermoExp(node);
    }

    public void inAExp6TermoExp(AExp6TermoExp node)
    {
        defaultIn(node);
    }

    public void outAExp6TermoExp(AExp6TermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp6TermoExp(AExp6TermoExp node)
    {
        inAExp6TermoExp(node);
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        if(node.getMaiorQue() != null)
        {
            node.getMaiorQue().apply(this);
        }
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAExp6TermoExp(node);
    }

    public void inAFatTermoExpl(AFatTermoExpl node)
    {
        defaultIn(node);
    }

    public void outAFatTermoExpl(AFatTermoExpl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatTermoExpl(AFatTermoExpl node)
    {
        inAFatTermoExpl(node);
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        outAFatTermoExpl(node);
    }

    public void inATermTermoExpl(ATermTermoExpl node)
    {
        defaultIn(node);
    }

    public void outATermTermoExpl(ATermTermoExpl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermTermoExpl(ATermTermoExpl node)
    {
        inATermTermoExpl(node);
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getTermoExpl() != null)
        {
            node.getTermoExpl().apply(this);
        }
        outATermTermoExpl(node);
    }

    public void inATerm1TermoExpl(ATerm1TermoExpl node)
    {
        defaultIn(node);
    }

    public void outATerm1TermoExpl(ATerm1TermoExpl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm1TermoExpl(ATerm1TermoExpl node)
    {
        inATerm1TermoExpl(node);
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getTermoExpl() != null)
        {
            node.getTermoExpl().apply(this);
        }
        outATerm1TermoExpl(node);
    }

    public void inATerm2TermoExpl(ATerm2TermoExpl node)
    {
        defaultIn(node);
    }

    public void outATerm2TermoExpl(ATerm2TermoExpl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm2TermoExpl(ATerm2TermoExpl node)
    {
        inATerm2TermoExpl(node);
        if(node.getTermoExp() != null)
        {
            node.getTermoExp().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getTermoExpl() != null)
        {
            node.getTermoExpl().apply(this);
        }
        outATerm2TermoExpl(node);
    }

    public void inATermoExplogica(ATermoExplogica node)
    {
        defaultIn(node);
    }

    public void outATermoExplogica(ATermoExplogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExplogica(ATermoExplogica node)
    {
        inATermoExplogica(node);
        if(node.getTermoExpl() != null)
        {
            node.getTermoExpl().apply(this);
        }
        outATermoExplogica(node);
    }

    public void inANaoExplogica(ANaoExplogica node)
    {
        defaultIn(node);
    }

    public void outANaoExplogica(ANaoExplogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExplogica(ANaoExplogica node)
    {
        inANaoExplogica(node);
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoExplogica(node);
    }

    public void inARepitaEst(ARepitaEst node)
    {
        defaultIn(node);
    }

    public void outARepitaEst(ARepitaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaEst(ARepitaEst node)
    {
        inARepitaEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaEst(node);
    }

    public void inAForParaEst(AForParaEst node)
    {
        defaultIn(node);
    }

    public void outAForParaEst(AForParaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForParaEst(AForParaEst node)
    {
        inAForParaEst(node);
        if(node.getFor1() != null)
        {
            node.getFor1().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAForParaEst(node);
    }

    public void inAForPassoParaEst(AForPassoParaEst node)
    {
        defaultIn(node);
    }

    public void outAForPassoParaEst(AForPassoParaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForPassoParaEst(AForPassoParaEst node)
    {
        inAForPassoParaEst(node);
        if(node.getFor2() != null)
        {
            node.getFor2().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAForPassoParaEst(node);
    }

    public void inAFor1(AFor1 node)
    {
        defaultIn(node);
    }

    public void outAFor1(AFor1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFor1(AFor1 node)
    {
        inAFor1(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        outAFor1(node);
    }

    public void inAFor2(AFor2 node)
    {
        defaultIn(node);
    }

    public void outAFor2(AFor2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFor2(AFor2 node)
    {
        inAFor2(node);
        if(node.getFor1() != null)
        {
            node.getFor1().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        outAFor2(node);
    }

    public void inAEnquantoEst(AEnquantoEst node)
    {
        defaultIn(node);
    }

    public void outAEnquantoEst(AEnquantoEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoEst(AEnquantoEst node)
    {
        inAEnquantoEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoEst(node);
    }

    public void inASeEst(ASeEst node)
    {
        defaultIn(node);
    }

    public void outASeEst(ASeEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeEst(ASeEst node)
    {
        inASeEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeEst(node);
    }

    public void inAElseSeEst(AElseSeEst node)
    {
        defaultIn(node);
    }

    public void outAElseSeEst(AElseSeEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseSeEst(AElseSeEst node)
    {
        inAElseSeEst(node);
        if(node.getSeSen() != null)
        {
            node.getSeSen().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAElseSeEst(node);
    }

    public void inASeSen(ASeSen node)
    {
        defaultIn(node);
    }

    public void outASeSen(ASeSen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSen(ASeSen node)
    {
        inASeSen(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASeSen(node);
    }

    public void inAAvalieEst(AAvalieEst node)
    {
        defaultIn(node);
    }

    public void outAAvalieEst(AAvalieEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieEst(AAvalieEst node)
    {
        inAAvalieEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getCasoM() != null)
        {
            node.getCasoM().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieEst(node);
    }

    public void inAAvalieAvalieEst(AAvalieAvalieEst node)
    {
        defaultIn(node);
    }

    public void outAAvalieAvalieEst(AAvalieAvalieEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieAvalieEst(AAvalieAvalieEst node)
    {
        inAAvalieAvalieEst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getCasoM() != null)
        {
            node.getCasoM().apply(this);
        }
        if(node.getParenDir() != null)
        {
            node.getParenDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParenEsq() != null)
        {
            node.getParenEsq().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieAvalieEst(node);
    }

    public void inACasoCasoM(ACasoCasoM node)
    {
        defaultIn(node);
    }

    public void outACasoCasoM(ACasoCasoM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoCasoM(ACasoCasoM node)
    {
        inACasoCasoM(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getCasoM() != null)
        {
            node.getCasoM().apply(this);
        }
        outACasoCasoM(node);
    }

    public void inACasoM(ACasoM node)
    {
        defaultIn(node);
    }

    public void outACasoM(ACasoM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoM(ACasoM node)
    {
        inACasoM(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outACasoM(node);
    }

    public void inADeclComando(ADeclComando node)
    {
        defaultIn(node);
    }

    public void outADeclComando(ADeclComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclComando(ADeclComando node)
    {
        inADeclComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclComando(node);
    }

    public void inAAtribuiComando(AAtribuiComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuiComando(AAtribuiComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuiComando(AAtribuiComando node)
    {
        inAAtribuiComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getAtribui() != null)
        {
            node.getAtribui().apply(this);
        }
        outAAtribuiComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getLeiaEst() != null)
        {
            node.getLeiaEst().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscreveraComando(AEscreveraComando node)
    {
        defaultIn(node);
    }

    public void outAEscreveraComando(AEscreveraComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscreveraComando(AEscreveraComando node)
    {
        inAEscreveraComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEscrevaEst() != null)
        {
            node.getEscrevaEst().apply(this);
        }
        outAEscreveraComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRepitaEst() != null)
        {
            node.getRepitaEst().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParaEst() != null)
        {
            node.getParaEst().apply(this);
        }
        outAParaComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEnquantoEst() != null)
        {
            node.getEnquantoEst().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSeEst() != null)
        {
            node.getSeEst().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getAvalieEst() != null)
        {
            node.getAvalieEst().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAVazioComando(AVazioComando node)
    {
        defaultIn(node);
    }

    public void outAVazioComando(AVazioComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioComando(AVazioComando node)
    {
        inAVazioComando(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAVazioComando(node);
    }
}
