/* This file was generated by SableCC (http://www.sablecc.org/). */

package projetolft.analysis;

import java.util.*;
import projetolft.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgramaEst().apply(this);
        outStart(node);
    }

    public void inAProgramaEst(AProgramaEst node)
    {
        defaultIn(node);
    }

    public void outAProgramaEst(AProgramaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaEst(AProgramaEst node)
    {
        inAProgramaEst(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAProgramaEst(node);
    }

    public void inAVazio(AVazio node)
    {
        defaultIn(node);
    }

    public void outAVazio(AVazio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazio(AVazio node)
    {
        inAVazio(node);
        outAVazio(node);
    }

    public void inADeclmDeclaracao(ADeclmDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclmDeclaracao(ADeclmDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclmDeclaracao(ADeclmDeclaracao node)
    {
        inADeclmDeclaracao(node);
        if(node.getDeclM() != null)
        {
            node.getDeclM().apply(this);
        }
        if(node.getTipoVariavel() != null)
        {
            node.getTipoVariavel().apply(this);
        }
        outADeclmDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inADeclMDeclM(ADeclMDeclM node)
    {
        defaultIn(node);
    }

    public void outADeclMDeclM(ADeclMDeclM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclMDeclM(ADeclMDeclM node)
    {
        inADeclMDeclM(node);
        if(node.getDeclM() != null)
        {
            node.getDeclM().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outADeclMDeclM(node);
    }

    public void inAVarDeclM(AVarDeclM node)
    {
        defaultIn(node);
    }

    public void outAVarDeclM(AVarDeclM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclM(AVarDeclM node)
    {
        inAVarDeclM(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarDeclM(node);
    }

    public void inAVarNVariavel(AVarNVariavel node)
    {
        defaultIn(node);
    }

    public void outAVarNVariavel(AVarNVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarNVariavel(AVarNVariavel node)
    {
        inAVarNVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarNVariavel(node);
    }

    public void inAVarVVariavel(AVarVVariavel node)
    {
        defaultIn(node);
    }

    public void outAVarVVariavel(AVarVVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVVariavel(AVarVVariavel node)
    {
        inAVarVVariavel(node);
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarVVariavel(node);
    }

    public void inADeclComando(ADeclComando node)
    {
        defaultIn(node);
    }

    public void outADeclComando(ADeclComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclComando(ADeclComando node)
    {
        inADeclComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclComando(node);
    }

    public void inAAtribuiComando(AAtribuiComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuiComando(AAtribuiComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuiComando(AAtribuiComando node)
    {
        inAAtribuiComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getAtribui() != null)
        {
            node.getAtribui().apply(this);
        }
        outAAtribuiComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getLeiaEst() != null)
        {
            node.getLeiaEst().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscreverComando(AEscreverComando node)
    {
        defaultIn(node);
    }

    public void outAEscreverComando(AEscreverComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscreverComando(AEscreverComando node)
    {
        inAEscreverComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEscrevaEst() != null)
        {
            node.getEscrevaEst().apply(this);
        }
        outAEscreverComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRepitaEst() != null)
        {
            node.getRepitaEst().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParaEst() != null)
        {
            node.getParaEst().apply(this);
        }
        outAParaComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEnquantoEst() != null)
        {
            node.getEnquantoEst().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSeEst() != null)
        {
            node.getSeEst().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getAvalieEst() != null)
        {
            node.getAvalieEst().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAVazioComando(AVazioComando node)
    {
        defaultIn(node);
    }

    public void outAVazioComando(AVazioComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioComando(AVazioComando node)
    {
        inAVazioComando(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAVazioComando(node);
    }

    public void inANumIntValor(ANumIntValor node)
    {
        defaultIn(node);
    }

    public void outANumIntValor(ANumIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumIntValor(ANumIntValor node)
    {
        inANumIntValor(node);
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        outANumIntValor(node);
    }

    public void inANumRealValor(ANumRealValor node)
    {
        defaultIn(node);
    }

    public void outANumRealValor(ANumRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumRealValor(ANumRealValor node)
    {
        inANumRealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumRealValor(node);
    }

    public void inACharValor(ACharValor node)
    {
        defaultIn(node);
    }

    public void outACharValor(ACharValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValor(ACharValor node)
    {
        inACharValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outACharValor(node);
    }

    public void inANumeroRealTipoVariavel(ANumeroRealTipoVariavel node)
    {
        defaultIn(node);
    }

    public void outANumeroRealTipoVariavel(ANumeroRealTipoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealTipoVariavel(ANumeroRealTipoVariavel node)
    {
        inANumeroRealTipoVariavel(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outANumeroRealTipoVariavel(node);
    }

    public void inANumIntTipoVariavel(ANumIntTipoVariavel node)
    {
        defaultIn(node);
    }

    public void outANumIntTipoVariavel(ANumIntTipoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumIntTipoVariavel(ANumIntTipoVariavel node)
    {
        inANumIntTipoVariavel(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outANumIntTipoVariavel(node);
    }

    public void inACaractereTipoVariavel(ACaractereTipoVariavel node)
    {
        defaultIn(node);
    }

    public void outACaractereTipoVariavel(ACaractereTipoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipoVariavel(ACaractereTipoVariavel node)
    {
        inACaractereTipoVariavel(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipoVariavel(node);
    }

    public void inAAtribui(AAtribui node)
    {
        defaultIn(node);
    }

    public void outAAtribui(AAtribui node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribui(AAtribui node)
    {
        inAAtribui(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAAtribui(node);
    }

    public void inALeiaEst(ALeiaEst node)
    {
        defaultIn(node);
    }

    public void outALeiaEst(ALeiaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaEst(ALeiaEst node)
    {
        inALeiaEst(node);
        if(node.getLeiaM() != null)
        {
            node.getLeiaM().apply(this);
        }
        outALeiaEst(node);
    }

    public void inALeiaMLeiaM(ALeiaMLeiaM node)
    {
        defaultIn(node);
    }

    public void outALeiaMLeiaM(ALeiaMLeiaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaMLeiaM(ALeiaMLeiaM node)
    {
        inALeiaMLeiaM(node);
        if(node.getLeiaM() != null)
        {
            node.getLeiaM().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outALeiaMLeiaM(node);
    }

    public void inAVarLeiaM(AVarLeiaM node)
    {
        defaultIn(node);
    }

    public void outAVarLeiaM(AVarLeiaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarLeiaM(AVarLeiaM node)
    {
        inAVarLeiaM(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarLeiaM(node);
    }

    public void inAEscrevaEst(AEscrevaEst node)
    {
        defaultIn(node);
    }

    public void outAEscrevaEst(AEscrevaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaEst(AEscrevaEst node)
    {
        inAEscrevaEst(node);
        if(node.getEscrevaM() != null)
        {
            node.getEscrevaM().apply(this);
        }
        outAEscrevaEst(node);
    }

    public void inAEscMEscrevaM(AEscMEscrevaM node)
    {
        defaultIn(node);
    }

    public void outAEscMEscrevaM(AEscMEscrevaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscMEscrevaM(AEscMEscrevaM node)
    {
        inAEscMEscrevaM(node);
        if(node.getEscrevaM() != null)
        {
            node.getEscrevaM().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAEscMEscrevaM(node);
    }

    public void inAExpEscrevaM(AExpEscrevaM node)
    {
        defaultIn(node);
    }

    public void outAExpEscrevaM(AExpEscrevaM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEscrevaM(AExpEscrevaM node)
    {
        inAExpEscrevaM(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpEscrevaM(node);
    }

    public void inAMaisExp(AMaisExp node)
    {
        defaultIn(node);
    }

    public void outAMaisExp(AMaisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExp(AMaisExp node)
    {
        inAMaisExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaisExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outADivExp(node);
    }

    public void inAVariavelExp(AVariavelExp node)
    {
        defaultIn(node);
    }

    public void outAVariavelExp(AVariavelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExp(AVariavelExp node)
    {
        inAVariavelExp(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelExp(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAMenosExpExp(AMenosExpExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExpExp(AMenosExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpExp(AMenosExpExp node)
    {
        inAMenosExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosExpExp(node);
    }

    public void inALogExp(ALogExp node)
    {
        defaultIn(node);
    }

    public void outALogExp(ALogExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogExp(ALogExp node)
    {
        inALogExp(node);
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outALogExp(node);
    }

    public void inATermoExpA(ATermoExpA node)
    {
        defaultIn(node);
    }

    public void outATermoExpA(ATermoExpA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpA(ATermoExpA node)
    {
        inATermoExpA(node);
        if(node.getTermoA() != null)
        {
            node.getTermoA().apply(this);
        }
        outATermoExpA(node);
    }

    public void inAMaisExpA(AMaisExpA node)
    {
        defaultIn(node);
    }

    public void outAMaisExpA(AMaisExpA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpA(AMaisExpA node)
    {
        inAMaisExpA(node);
        if(node.getTermoA() != null)
        {
            node.getTermoA().apply(this);
        }
        if(node.getSomaA() != null)
        {
            node.getSomaA().apply(this);
        }
        if(node.getExpA() != null)
        {
            node.getExpA().apply(this);
        }
        outAMaisExpA(node);
    }

    public void inAVarExpA(AVarExpA node)
    {
        defaultIn(node);
    }

    public void outAVarExpA(AVarExpA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpA(AVarExpA node)
    {
        inAVarExpA(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarExpA(node);
    }

    public void inAMaisSomaA(AMaisSomaA node)
    {
        defaultIn(node);
    }

    public void outAMaisSomaA(AMaisSomaA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSomaA(AMaisSomaA node)
    {
        inAMaisSomaA(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisSomaA(node);
    }

    public void inAMenosSomaA(AMenosSomaA node)
    {
        defaultIn(node);
    }

    public void outAMenosSomaA(AMenosSomaA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSomaA(AMenosSomaA node)
    {
        inAMenosSomaA(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosSomaA(node);
    }

    public void inAFatTermoA(AFatTermoA node)
    {
        defaultIn(node);
    }

    public void outAFatTermoA(AFatTermoA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatTermoA(AFatTermoA node)
    {
        inAFatTermoA(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        outAFatTermoA(node);
    }

    public void inAMultTermoA(AMultTermoA node)
    {
        defaultIn(node);
    }

    public void outAMultTermoA(AMultTermoA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermoA(AMultTermoA node)
    {
        inAMultTermoA(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        if(node.getMultA() != null)
        {
            node.getMultA().apply(this);
        }
        if(node.getTermoA() != null)
        {
            node.getTermoA().apply(this);
        }
        outAMultTermoA(node);
    }

    public void inAMultMultA(AMultMultA node)
    {
        defaultIn(node);
    }

    public void outAMultMultA(AMultMultA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultA(AMultMultA node)
    {
        inAMultMultA(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultMultA(node);
    }

    public void inADivMultA(ADivMultA node)
    {
        defaultIn(node);
    }

    public void outADivMultA(ADivMultA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultA(ADivMultA node)
    {
        inADivMultA(node);
        if(node.getDivInt() != null)
        {
            node.getDivInt().apply(this);
        }
        outADivMultA(node);
    }

    public void inAExpressaoFatorA(AExpressaoFatorA node)
    {
        defaultIn(node);
    }

    public void outAExpressaoFatorA(AExpressaoFatorA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoFatorA(AExpressaoFatorA node)
    {
        inAExpressaoFatorA(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpressaoFatorA(node);
    }

    public void inAValorFatorA(AValorFatorA node)
    {
        defaultIn(node);
    }

    public void outAValorFatorA(AValorFatorA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFatorA(AValorFatorA node)
    {
        inAValorFatorA(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFatorA(node);
    }

    public void inAMenosFatorA(AMenosFatorA node)
    {
        defaultIn(node);
    }

    public void outAMenosFatorA(AMenosFatorA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosFatorA(AMenosFatorA node)
    {
        inAMenosFatorA(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosFatorA(node);
    }

    public void inAMultipleExplogica(AMultipleExplogica node)
    {
        defaultIn(node);
    }

    public void outAMultipleExplogica(AMultipleExplogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleExplogica(AMultipleExplogica node)
    {
        inAMultipleExplogica(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAMultipleExplogica(node);
    }

    public void inAExExplogica(AExExplogica node)
    {
        defaultIn(node);
    }

    public void outAExExplogica(AExExplogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExExplogica(AExExplogica node)
    {
        inAExExplogica(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAExExplogica(node);
    }

    public void inASingleExplogica(ASingleExplogica node)
    {
        defaultIn(node);
    }

    public void outASingleExplogica(ASingleExplogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExplogica(ASingleExplogica node)
    {
        inASingleExplogica(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outASingleExplogica(node);
    }

    public void inAMultipleExpOu(AMultipleExpOu node)
    {
        defaultIn(node);
    }

    public void outAMultipleExpOu(AMultipleExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleExpOu(AMultipleExpOu node)
    {
        inAMultipleExpOu(node);
        if(node.getExpXor() != null)
        {
            node.getExpXor().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outAMultipleExpOu(node);
    }

    public void inAExppExpOu(AExppExpOu node)
    {
        defaultIn(node);
    }

    public void outAExppExpOu(AExppExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExppExpOu(AExppExpOu node)
    {
        inAExppExpOu(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outAExppExpOu(node);
    }

    public void inASingleExpOu(ASingleExpOu node)
    {
        defaultIn(node);
    }

    public void outASingleExpOu(ASingleExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpOu(ASingleExpOu node)
    {
        inASingleExpOu(node);
        if(node.getExpXor() != null)
        {
            node.getExpXor().apply(this);
        }
        outASingleExpOu(node);
    }

    public void inAMultipleExpXor(AMultipleExpXor node)
    {
        defaultIn(node);
    }

    public void outAMultipleExpXor(AMultipleExpXor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleExpXor(AMultipleExpXor node)
    {
        inAMultipleExpXor(node);
        if(node.getAuxXor() != null)
        {
            node.getAuxXor().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExpXor() != null)
        {
            node.getExpXor().apply(this);
        }
        outAMultipleExpXor(node);
    }

    public void inAFatExpXor(AFatExpXor node)
    {
        defaultIn(node);
    }

    public void outAFatExpXor(AFatExpXor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatExpXor(AFatExpXor node)
    {
        inAFatExpXor(node);
        if(node.getExplFator() != null)
        {
            node.getExplFator().apply(this);
        }
        outAFatExpXor(node);
    }

    public void inASingleAuxXor(ASingleAuxXor node)
    {
        defaultIn(node);
    }

    public void outASingleAuxXor(ASingleAuxXor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAuxXor(ASingleAuxXor node)
    {
        inASingleAuxXor(node);
        if(node.getExplFator() != null)
        {
            node.getExplFator().apply(this);
        }
        outASingleAuxXor(node);
    }

    public void inAFatAuxXor(AFatAuxXor node)
    {
        defaultIn(node);
    }

    public void outAFatAuxXor(AFatAuxXor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatAuxXor(AFatAuxXor node)
    {
        inAFatAuxXor(node);
        if(node.getFatorA() != null)
        {
            node.getFatorA().apply(this);
        }
        outAFatAuxXor(node);
    }

    public void inAExigExplFator(AExigExplFator node)
    {
        defaultIn(node);
    }

    public void outAExigExplFator(AExigExplFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExigExplFator(AExigExplFator node)
    {
        inAExigExplFator(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAExigExplFator(node);
    }

    public void inAOutroExplFator(AOutroExplFator node)
    {
        defaultIn(node);
    }

    public void outAOutroExplFator(AOutroExplFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutroExplFator(AOutroExplFator node)
    {
        inAOutroExplFator(node);
        if(node.getExplTermo() != null)
        {
            node.getExplTermo().apply(this);
        }
        outAOutroExplFator(node);
    }

    public void inAExdifExplFator(AExdifExplFator node)
    {
        defaultIn(node);
    }

    public void outAExdifExplFator(AExdifExplFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExdifExplFator(AExdifExplFator node)
    {
        inAExdifExplFator(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAExdifExplFator(node);
    }

    public void inAMiExplTermo(AMiExplTermo node)
    {
        defaultIn(node);
    }

    public void outAMiExplTermo(AMiExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMiExplTermo(AMiExplTermo node)
    {
        inAMiExplTermo(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMiExplTermo(node);
    }

    public void inAMeiExplTermo(AMeiExplTermo node)
    {
        defaultIn(node);
    }

    public void outAMeiExplTermo(AMeiExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeiExplTermo(AMeiExplTermo node)
    {
        inAMeiExplTermo(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMeiExplTermo(node);
    }

    public void inAMqExplTermo(AMqExplTermo node)
    {
        defaultIn(node);
    }

    public void outAMqExplTermo(AMqExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMqExplTermo(AMqExplTermo node)
    {
        inAMqExplTermo(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMqExplTermo(node);
    }

    public void inAMeqExplTermo(AMeqExplTermo node)
    {
        defaultIn(node);
    }

    public void outAMeqExplTermo(AMeqExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeqExplTermo(AMeqExplTermo node)
    {
        inAMeqExplTermo(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMeqExplTermo(node);
    }

    public void inASingleExplTermo(ASingleExplTermo node)
    {
        defaultIn(node);
    }

    public void outASingleExplTermo(ASingleExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExplTermo(ASingleExplTermo node)
    {
        inASingleExplTermo(node);
        if(node.getExplFator() != null)
        {
            node.getExplFator().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outASingleExplTermo(node);
    }

    public void inAUnicaExplTermo(AUnicaExplTermo node)
    {
        defaultIn(node);
    }

    public void outAUnicaExplTermo(AUnicaExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicaExplTermo(AUnicaExplTermo node)
    {
        inAUnicaExplTermo(node);
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAUnicaExplTermo(node);
    }

    public void inAMultiplaIgExplTermo(AMultiplaIgExplTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplaIgExplTermo(AMultiplaIgExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplaIgExplTermo(AMultiplaIgExplTermo node)
    {
        inAMultiplaIgExplTermo(node);
        if(node.getExplTermo() != null)
        {
            node.getExplTermo().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAMultiplaIgExplTermo(node);
    }

    public void inAMultiplaDifExplTermo(AMultiplaDifExplTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplaDifExplTermo(AMultiplaDifExplTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplaDifExplTermo(AMultiplaDifExplTermo node)
    {
        inAMultiplaDifExplTermo(node);
        if(node.getExplTermo() != null)
        {
            node.getExplTermo().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAMultiplaDifExplTermo(node);
    }

    public void inARepitaEst(ARepitaEst node)
    {
        defaultIn(node);
    }

    public void outARepitaEst(ARepitaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaEst(ARepitaEst node)
    {
        inARepitaEst(node);
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outARepitaEst(node);
    }

    public void inAForParaEst(AForParaEst node)
    {
        defaultIn(node);
    }

    public void outAForParaEst(AForParaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForParaEst(AForParaEst node)
    {
        inAForParaEst(node);
        if(node.getFor1() != null)
        {
            node.getFor1().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAForParaEst(node);
    }

    public void inAForPassoParaEst(AForPassoParaEst node)
    {
        defaultIn(node);
    }

    public void outAForPassoParaEst(AForPassoParaEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForPassoParaEst(AForPassoParaEst node)
    {
        inAForPassoParaEst(node);
        if(node.getFor2() != null)
        {
            node.getFor2().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAForPassoParaEst(node);
    }

    public void inAFor1(AFor1 node)
    {
        defaultIn(node);
    }

    public void outAFor1(AFor1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFor1(AFor1 node)
    {
        inAFor1(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        outAFor1(node);
    }

    public void inAFor2(AFor2 node)
    {
        defaultIn(node);
    }

    public void outAFor2(AFor2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFor2(AFor2 node)
    {
        inAFor2(node);
        if(node.getFor1() != null)
        {
            node.getFor1().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        outAFor2(node);
    }

    public void inAEnquantoEst(AEnquantoEst node)
    {
        defaultIn(node);
    }

    public void outAEnquantoEst(AEnquantoEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoEst(AEnquantoEst node)
    {
        inAEnquantoEst(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAEnquantoEst(node);
    }

    public void inAIfSeEst(AIfSeEst node)
    {
        defaultIn(node);
    }

    public void outAIfSeEst(AIfSeEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSeEst(AIfSeEst node)
    {
        inAIfSeEst(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAIfSeEst(node);
    }

    public void inAElseSeEst(AElseSeEst node)
    {
        defaultIn(node);
    }

    public void outAElseSeEst(AElseSeEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseSeEst(AElseSeEst node)
    {
        inAElseSeEst(node);
        if(node.getSeSen() != null)
        {
            node.getSeSen().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getExplogica() != null)
        {
            node.getExplogica().apply(this);
        }
        outAElseSeEst(node);
    }

    public void inASeSen(ASeSen node)
    {
        defaultIn(node);
    }

    public void outASeSen(ASeSen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSen(ASeSen node)
    {
        inASeSen(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outASeSen(node);
    }

    public void inANormalAvalieEst(ANormalAvalieEst node)
    {
        defaultIn(node);
    }

    public void outANormalAvalieEst(ANormalAvalieEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAvalieEst(ANormalAvalieEst node)
    {
        inANormalAvalieEst(node);
        if(node.getCasoM() != null)
        {
            node.getCasoM().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANormalAvalieEst(node);
    }

    public void inAElseAvalieEst(AElseAvalieEst node)
    {
        defaultIn(node);
    }

    public void outAElseAvalieEst(AElseAvalieEst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseAvalieEst(AElseAvalieEst node)
    {
        inAElseAvalieEst(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getCasoM() != null)
        {
            node.getCasoM().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElseAvalieEst(node);
    }

    public void inACasoCasoM(ACasoCasoM node)
    {
        defaultIn(node);
    }

    public void outACasoCasoM(ACasoCasoM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoCasoM(ACasoCasoM node)
    {
        inACasoCasoM(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCasoM() != null)
        {
            node.getCasoM().apply(this);
        }
        outACasoCasoM(node);
    }

    public void inANadaCasoM(ANadaCasoM node)
    {
        defaultIn(node);
    }

    public void outANadaCasoM(ANadaCasoM node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaCasoM(ANadaCasoM node)
    {
        inANadaCasoM(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outANadaCasoM(node);
    }
}
