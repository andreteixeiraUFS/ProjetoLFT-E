/* This file was generated by SableCC (http://www.sablecc.org/). */

package projetolft.parser;

import projetolft.lexer.*;
import projetolft.node.*;
import projetolft.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramaEst node1 = (PProgramaEst) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramaEst */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AVazio */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce ADeclmDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce ADeclMDeclM */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AVarDeclM */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AVarNVariavel */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AVarVVariavel */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce ANumIntValor */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce ANumRealValor */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce ACharValor */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ANumeroRealTipoVariavel */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce ANumIntTipoVariavel */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce ACaractereTipoVariavel */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AAtribui */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce ALeiaEst */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ALeiaMLeiaM */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list);
            }
            break;
            case 17: /* reduce AVarLeiaM */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AEscrevaEst */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce AEscMEscrevaM */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list);
            }
            break;
            case 20: /* reduce AExpEscrevaM */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list);
            }
            break;
            case 22: /* reduce AMaisExp */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AMenosExp */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce ADivTermo */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list);
            }
            break;
            case 28: /* reduce AValorFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list);
            }
            break;
            case 29: /* reduce AExpFator */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AMenosExpFator */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce ATermoExpA */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list);
            }
            break;
            case 32: /* reduce AMaisExpA */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list);
            }
            break;
            case 33: /* reduce AVarExpA */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce AMaisSomaA */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list);
            }
            break;
            case 35: /* reduce AMenosSomaA */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list);
            }
            break;
            case 36: /* reduce AFatTermoA */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list);
            }
            break;
            case 37: /* reduce AMultTermoA */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list);
            }
            break;
            case 38: /* reduce AMultMultA */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list);
            }
            break;
            case 39: /* reduce ADivMultA */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list);
            }
            break;
            case 40: /* reduce AExpressaoFatorA */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list);
            }
            break;
            case 41: /* reduce AValorFatorA */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list);
            }
            break;
            case 42: /* reduce AMenosFatorA */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AMultipleExplogica */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce AExExplogica */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce ASingleExplogica */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list);
            }
            break;
            case 46: /* reduce AMultipleExpOu */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list);
            }
            break;
            case 47: /* reduce AExppExpOu */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list);
            }
            break;
            case 48: /* reduce ASingleExpOu */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce AMultipleExpXor */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce AFatExpXor */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce ASingleAuxXor */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list);
            }
            break;
            case 52: /* reduce AFatAuxXor */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AExigExplFator */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list);
            }
            break;
            case 54: /* reduce AExdifExplFator */
            {
                ArrayList<Object> list = new54();
                push(goTo(24), list);
            }
            break;
            case 55: /* reduce AOutroExplFator */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list);
            }
            break;
            case 56: /* reduce AMiExplTermo */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list);
            }
            break;
            case 57: /* reduce AMeiExplTermo */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list);
            }
            break;
            case 58: /* reduce AMqExplTermo */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list);
            }
            break;
            case 59: /* reduce AMeqExplTermo */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list);
            }
            break;
            case 60: /* reduce ASingleExplTermo */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list);
            }
            break;
            case 61: /* reduce AUnicaExplTermo */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list);
            }
            break;
            case 62: /* reduce AMultiplaIgExplTermo */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list);
            }
            break;
            case 63: /* reduce AMultiplaDifExplTermo */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
            case 64: /* reduce ARepitaEst */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list);
            }
            break;
            case 65: /* reduce AForParaEst */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list);
            }
            break;
            case 66: /* reduce AForPassoParaEst */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list);
            }
            break;
            case 67: /* reduce AFor1 */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list);
            }
            break;
            case 68: /* reduce AFor2 */
            {
                ArrayList<Object> list = new68();
                push(goTo(29), list);
            }
            break;
            case 69: /* reduce AEnquantoEst */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list);
            }
            break;
            case 70: /* reduce AIfSeEst */
            {
                ArrayList<Object> list = new70();
                push(goTo(31), list);
            }
            break;
            case 71: /* reduce AElseSeEst */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list);
            }
            break;
            case 72: /* reduce ASeSen */
            {
                ArrayList<Object> list = new72();
                push(goTo(32), list);
            }
            break;
            case 73: /* reduce ANormalAvalieEst */
            {
                ArrayList<Object> list = new73();
                push(goTo(33), list);
            }
            break;
            case 74: /* reduce AElseAvalieEst */
            {
                ArrayList<Object> list = new74();
                push(goTo(33), list);
            }
            break;
            case 75: /* reduce ACasoCasoM */
            {
                ArrayList<Object> list = new75();
                push(goTo(34), list);
            }
            break;
            case 76: /* reduce ANadaCasoM */
            {
                ArrayList<Object> list = new76();
                push(goTo(34), list);
            }
            break;
            case 77: /* reduce ADeclComando */
            {
                ArrayList<Object> list = new77();
                push(goTo(35), list);
            }
            break;
            case 78: /* reduce AAtribuiComando */
            {
                ArrayList<Object> list = new78();
                push(goTo(35), list);
            }
            break;
            case 79: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new79();
                push(goTo(35), list);
            }
            break;
            case 80: /* reduce AEscreverComando */
            {
                ArrayList<Object> list = new80();
                push(goTo(35), list);
            }
            break;
            case 81: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new81();
                push(goTo(35), list);
            }
            break;
            case 82: /* reduce AParaComando */
            {
                ArrayList<Object> list = new82();
                push(goTo(35), list);
            }
            break;
            case 83: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new83();
                push(goTo(35), list);
            }
            break;
            case 84: /* reduce ASeComando */
            {
                ArrayList<Object> list = new84();
                push(goTo(35), list);
            }
            break;
            case 85: /* reduce AAvalieComando */
            {
                ArrayList<Object> list = new85();
                push(goTo(35), list);
            }
            break;
            case 86: /* reduce AVazioComando */
            {
                ArrayList<Object> list = new86();
                push(goTo(35), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramaEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramaEst pprogramaestNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TInicio tinicioNode3;
        PDeclaracao pdeclaracaoNode4;
        PComando pcomandoNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        tinicioNode3 = (TInicio)nodeArrayList3.get(0);
        pdeclaracaoNode4 = (PDeclaracao)nodeArrayList4.get(0);
        pcomandoNode5 = (PComando)nodeArrayList5.get(0);

        pprogramaestNode1 = new AProgramaEst(tidentificadorNode2, tinicioNode3, pdeclaracaoNode4, pcomandoNode5);
        }
	nodeList.add(pprogramaestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AVazio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVazio pvazioNode1;
        {
            // Block

        pvazioNode1 = new AVazio();
        }
	nodeList.add(pvazioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclmDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipoVariavel ptipovariavelNode2;
        PDeclM pdeclmNode3;
        ptipovariavelNode2 = (PTipoVariavel)nodeArrayList1.get(0);
        pdeclmNode3 = (PDeclM)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new ADeclmDeclaracao(ptipovariavelNode2, pdeclmNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConstante tconstanteNode2;
        TIdentificador tidentificadorNode3;
        PValor pvalorNode4;
        tconstanteNode2 = (TConstante)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tconstanteNode2, tidentificadorNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclMDeclM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclM pdeclmNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PDeclM pdeclmNode3;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);
        pdeclmNode3 = (PDeclM)nodeArrayList3.get(0);

        pdeclmNode1 = new ADeclMDeclM(pvariavelNode2, pdeclmNode3);
        }
	nodeList.add(pdeclmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVarDeclM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclM pdeclmNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        pdeclmNode1 = new AVarDeclM(pvariavelNode2);
        }
	nodeList.add(pdeclmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVarNVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvariavelNode1 = new AVarNVariavel(tidentificadorNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVarVVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TNumeroInt tnumerointNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tnumerointNode3 = (TNumeroInt)nodeArrayList3.get(0);

        pvariavelNode1 = new AVarVVariavel(tidentificadorNode2, tnumerointNode3);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANumIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroInt tnumerointNode2;
        tnumerointNode2 = (TNumeroInt)nodeArrayList1.get(0);

        pvalorNode1 = new ANumIntValor(tnumerointNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ANumRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANumRealValor(tnumerorealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACharValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new ACharValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ANumeroRealTipoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoVariavel ptipovariavelNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipovariavelNode1 = new ANumeroRealTipoVariavel(trealNode2);
        }
	nodeList.add(ptipovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANumIntTipoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoVariavel ptipovariavelNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipovariavelNode1 = new ANumIntTipoVariavel(tinteiroNode2);
        }
	nodeList.add(ptipovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ACaractereTipoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoVariavel ptipovariavelNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipovariavelNode1 = new ACaractereTipoVariavel(tcaractereNode2);
        }
	nodeList.add(ptipovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAtribui */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtribui patribuiNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PExp pexpNode3;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        patribuiNode1 = new AAtribui(pvariavelNode2, pexpNode3);
        }
	nodeList.add(patribuiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ALeiaEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLeiaEst pleiaestNode1;
        {
            // Block
        PLeiaM pleiamNode2;
        pleiamNode2 = (PLeiaM)nodeArrayList3.get(0);

        pleiaestNode1 = new ALeiaEst(pleiamNode2);
        }
	nodeList.add(pleiaestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALeiaMLeiaM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLeiaM pleiamNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PLeiaM pleiamNode3;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);
        pleiamNode3 = (PLeiaM)nodeArrayList3.get(0);

        pleiamNode1 = new ALeiaMLeiaM(pvariavelNode2, pleiamNode3);
        }
	nodeList.add(pleiamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVarLeiaM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLeiaM pleiamNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        pleiamNode1 = new AVarLeiaM(pvariavelNode2);
        }
	nodeList.add(pleiamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEscrevaEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscrevaEst pescrevaestNode1;
        {
            // Block
        PEscrevaM pescrevamNode2;
        pescrevamNode2 = (PEscrevaM)nodeArrayList3.get(0);

        pescrevaestNode1 = new AEscrevaEst(pescrevamNode2);
        }
	nodeList.add(pescrevaestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AEscMEscrevaM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscrevaM pescrevamNode1;
        {
            // Block
        PExp pexpNode2;
        PEscrevaM pescrevamNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pescrevamNode3 = (PEscrevaM)nodeArrayList3.get(0);

        pescrevamNode1 = new AEscMEscrevaM(pexpNode2, pescrevamNode3);
        }
	nodeList.add(pescrevamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpEscrevaM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscrevaM pescrevamNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pescrevamNode1 = new AExpEscrevaM(pexpNode2);
        }
	nodeList.add(pescrevamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMaisExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaisExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMenosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenosExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        pexpNode1 = new AVariavelExp(pvariavelNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMenosExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TMenos tmenosNode2;
        PExp pexpNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AMenosExpExp(tmenosNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATermoExpA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpA pexpaNode1;
        {
            // Block
        PTermoA ptermoaNode2;
        ptermoaNode2 = (PTermoA)nodeArrayList1.get(0);

        pexpaNode1 = new ATermoExpA(ptermoaNode2);
        }
	nodeList.add(pexpaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMaisExpA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpA pexpaNode1;
        {
            // Block
        PExpA pexpaNode2;
        PSomaA psomaaNode3;
        PTermoA ptermoaNode4;
        pexpaNode2 = (PExpA)nodeArrayList1.get(0);
        psomaaNode3 = (PSomaA)nodeArrayList2.get(0);
        ptermoaNode4 = (PTermoA)nodeArrayList3.get(0);

        pexpaNode1 = new AMaisExpA(pexpaNode2, psomaaNode3, ptermoaNode4);
        }
	nodeList.add(pexpaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVarExpA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpA pexpaNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        pexpaNode1 = new AVarExpA(pvariavelNode2);
        }
	nodeList.add(pexpaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMaisSomaA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaA psomaaNode1;
        {
            // Block
        TMais tmaisNode2;
        tmaisNode2 = (TMais)nodeArrayList1.get(0);

        psomaaNode1 = new AMaisSomaA(tmaisNode2);
        }
	nodeList.add(psomaaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMenosSomaA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaA psomaaNode1;
        {
            // Block
        TMenos tmenosNode2;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);

        psomaaNode1 = new AMenosSomaA(tmenosNode2);
        }
	nodeList.add(psomaaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AFatTermoA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermoA ptermoaNode1;
        {
            // Block
        PFatorA pfatoraNode2;
        pfatoraNode2 = (PFatorA)nodeArrayList1.get(0);

        ptermoaNode1 = new AFatTermoA(pfatoraNode2);
        }
	nodeList.add(ptermoaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMultTermoA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermoA ptermoaNode1;
        {
            // Block
        PTermoA ptermoaNode2;
        PMultA pmultaNode3;
        PFatorA pfatoraNode4;
        ptermoaNode2 = (PTermoA)nodeArrayList1.get(0);
        pmultaNode3 = (PMultA)nodeArrayList2.get(0);
        pfatoraNode4 = (PFatorA)nodeArrayList3.get(0);

        ptermoaNode1 = new AMultTermoA(ptermoaNode2, pmultaNode3, pfatoraNode4);
        }
	nodeList.add(ptermoaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMultMultA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultA pmultaNode1;
        {
            // Block
        TMultiplicacao tmultiplicacaoNode2;
        tmultiplicacaoNode2 = (TMultiplicacao)nodeArrayList1.get(0);

        pmultaNode1 = new AMultMultA(tmultiplicacaoNode2);
        }
	nodeList.add(pmultaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADivMultA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultA pmultaNode1;
        {
            // Block
        TDivInt tdivintNode2;
        tdivintNode2 = (TDivInt)nodeArrayList1.get(0);

        pmultaNode1 = new ADivMultA(tdivintNode2);
        }
	nodeList.add(pmultaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExpressaoFatorA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorA pfatoraNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pfatoraNode1 = new AExpressaoFatorA(pexpNode2);
        }
	nodeList.add(pfatoraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AValorFatorA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorA pfatoraNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pfatoraNode1 = new AValorFatorA(pvalorNode2);
        }
	nodeList.add(pfatoraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMenosFatorA */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorA pfatoraNode1;
        {
            // Block
        TMenos tmenosNode2;
        PFatorA pfatoraNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pfatoraNode3 = (PFatorA)nodeArrayList2.get(0);

        pfatoraNode1 = new AMenosFatorA(tmenosNode2, pfatoraNode3);
        }
	nodeList.add(pfatoraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMultipleExplogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplogica pexplogicaNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        TE teNode3;
        PExpOu pexpouNode4;
        pexplogicaNode2 = (PExplogica)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pexpouNode4 = (PExpOu)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMultipleExplogica(pexplogicaNode2, teNode3, pexpouNode4);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExExplogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplogica pexplogicaNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        TE teNode3;
        PFatorA pfatoraNode4;
        pexplogicaNode2 = (PExplogica)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pfatoraNode4 = (PFatorA)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExExplogica(pexplogicaNode2, teNode3, pfatoraNode4);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASingleExplogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplogica pexplogicaNode1;
        {
            // Block
        PExpOu pexpouNode2;
        pexpouNode2 = (PExpOu)nodeArrayList1.get(0);

        pexplogicaNode1 = new ASingleExplogica(pexpouNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMultipleExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpOu pexpouNode1;
        {
            // Block
        PExpOu pexpouNode2;
        TOu touNode3;
        PExpXor pexpxorNode4;
        pexpouNode2 = (PExpOu)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpxorNode4 = (PExpXor)nodeArrayList3.get(0);

        pexpouNode1 = new AMultipleExpOu(pexpouNode2, touNode3, pexpxorNode4);
        }
	nodeList.add(pexpouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExppExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpOu pexpouNode1;
        {
            // Block
        PExpOu pexpouNode2;
        TOu touNode3;
        PFatorA pfatoraNode4;
        pexpouNode2 = (PExpOu)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pfatoraNode4 = (PFatorA)nodeArrayList3.get(0);

        pexpouNode1 = new AExppExpOu(pexpouNode2, touNode3, pfatoraNode4);
        }
	nodeList.add(pexpouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASingleExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpOu pexpouNode1;
        {
            // Block
        PExpXor pexpxorNode2;
        pexpxorNode2 = (PExpXor)nodeArrayList1.get(0);

        pexpouNode1 = new ASingleExpOu(pexpxorNode2);
        }
	nodeList.add(pexpouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMultipleExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpXor pexpxorNode1;
        {
            // Block
        PExpXor pexpxorNode2;
        TXor txorNode3;
        PAuxXor pauxxorNode4;
        pexpxorNode2 = (PExpXor)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pauxxorNode4 = (PAuxXor)nodeArrayList3.get(0);

        pexpxorNode1 = new AMultipleExpXor(pexpxorNode2, txorNode3, pauxxorNode4);
        }
	nodeList.add(pexpxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFatExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpXor pexpxorNode1;
        {
            // Block
        PExplFator pexplfatorNode2;
        pexplfatorNode2 = (PExplFator)nodeArrayList1.get(0);

        pexpxorNode1 = new AFatExpXor(pexplfatorNode2);
        }
	nodeList.add(pexpxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASingleAuxXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAuxXor pauxxorNode1;
        {
            // Block
        PExplFator pexplfatorNode2;
        pexplfatorNode2 = (PExplFator)nodeArrayList1.get(0);

        pauxxorNode1 = new ASingleAuxXor(pexplfatorNode2);
        }
	nodeList.add(pauxxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFatAuxXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAuxXor pauxxorNode1;
        {
            // Block
        PFatorA pfatoraNode2;
        pfatoraNode2 = (PFatorA)nodeArrayList1.get(0);

        pauxxorNode1 = new AFatAuxXor(pfatoraNode2);
        }
	nodeList.add(pauxxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExigExplFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplFator pexplfatorNode1;
        {
            // Block
        PExp pexpNode2;
        PExpA pexpaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpaNode3 = (PExpA)nodeArrayList3.get(0);

        pexplfatorNode1 = new AExigExplFator(pexpNode2, pexpaNode3);
        }
	nodeList.add(pexplfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AExdifExplFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplFator pexplfatorNode1;
        {
            // Block
        PExp pexpNode2;
        PExpA pexpaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpaNode3 = (PExpA)nodeArrayList3.get(0);

        pexplfatorNode1 = new AExdifExplFator(pexpNode2, pexpaNode3);
        }
	nodeList.add(pexplfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AOutroExplFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplFator pexplfatorNode1;
        {
            // Block
        PExplTermo pexpltermoNode2;
        pexpltermoNode2 = (PExplTermo)nodeArrayList1.get(0);

        pexplfatorNode1 = new AOutroExplFator(pexpltermoNode2);
        }
	nodeList.add(pexplfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMiExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExp pexpNode2;
        PExpA pexpaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpaNode3 = (PExpA)nodeArrayList3.get(0);

        pexpltermoNode1 = new AMiExplTermo(pexpNode2, pexpaNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMeiExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExp pexpNode2;
        PExpA pexpaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpaNode3 = (PExpA)nodeArrayList3.get(0);

        pexpltermoNode1 = new AMeiExplTermo(pexpNode2, pexpaNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMqExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExp pexpNode2;
        PExpA pexpaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpaNode3 = (PExpA)nodeArrayList3.get(0);

        pexpltermoNode1 = new AMqExplTermo(pexpNode2, pexpaNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMeqExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExp pexpNode2;
        PExpA pexpaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpaNode3 = (PExpA)nodeArrayList3.get(0);

        pexpltermoNode1 = new AMeqExplTermo(pexpNode2, pexpaNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ASingleExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        TNao tnaoNode2;
        PExplFator pexplfatorNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexplfatorNode3 = (PExplFator)nodeArrayList2.get(0);

        pexpltermoNode1 = new ASingleExplTermo(tnaoNode2, pexplfatorNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AUnicaExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        pexplogicaNode2 = (PExplogica)nodeArrayList2.get(0);

        pexpltermoNode1 = new AUnicaExplTermo(pexplogicaNode2);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMultiplaIgExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        PExplTermo pexpltermoNode3;
        pexplogicaNode2 = (PExplogica)nodeArrayList2.get(0);
        pexpltermoNode3 = (PExplTermo)nodeArrayList5.get(0);

        pexpltermoNode1 = new AMultiplaIgExplTermo(pexplogicaNode2, pexpltermoNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AMultiplaDifExplTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplTermo pexpltermoNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        PExplTermo pexpltermoNode3;
        pexplogicaNode2 = (PExplogica)nodeArrayList2.get(0);
        pexpltermoNode3 = (PExplTermo)nodeArrayList5.get(0);

        pexpltermoNode1 = new AMultiplaDifExplTermo(pexplogicaNode2, pexpltermoNode3);
        }
	nodeList.add(pexpltermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ARepitaEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRepitaEst prepitaestNode1;
        {
            // Block
        PComando pcomandoNode2;
        PExplogica pexplogicaNode3;
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
        pexplogicaNode3 = (PExplogica)nodeArrayList4.get(0);

        prepitaestNode1 = new ARepitaEst(pcomandoNode2, pexplogicaNode3);
        }
	nodeList.add(prepitaestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AForParaEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParaEst pparaestNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        TNumeroInt tnumerointNode3;
        PFor1 pfor1Node4;
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
        tnumerointNode3 = (TNumeroInt)nodeArrayList4.get(0);
        pfor1Node4 = (PFor1)nodeArrayList5.get(0);

        pparaestNode1 = new AForParaEst(pvariavelNode2, tnumerointNode3, pfor1Node4);
        }
	nodeList.add(pparaestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AForPassoParaEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParaEst pparaestNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        TNumeroInt tnumerointNode3;
        PFor2 pfor2Node4;
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
        tnumerointNode3 = (TNumeroInt)nodeArrayList4.get(0);
        pfor2Node4 = (PFor2)nodeArrayList5.get(0);

        pparaestNode1 = new AForPassoParaEst(pvariavelNode2, tnumerointNode3, pfor2Node4);
        }
	nodeList.add(pparaestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AFor1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFor1 pfor1Node1;
        {
            // Block
        TNumeroInt tnumerointNode2;
        PComando pcomandoNode3;
        tnumerointNode2 = (TNumeroInt)nodeArrayList2.get(0);
        pcomandoNode3 = (PComando)nodeArrayList4.get(0);

        pfor1Node1 = new AFor1(tnumerointNode2, pcomandoNode3);
        }
	nodeList.add(pfor1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AFor2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFor2 pfor2Node1;
        {
            // Block
        TNumeroInt tnumerointNode2;
        PFor1 pfor1Node3;
        tnumerointNode2 = (TNumeroInt)nodeArrayList2.get(0);
        pfor1Node3 = (PFor1)nodeArrayList3.get(0);

        pfor2Node1 = new AFor2(tnumerointNode2, pfor1Node3);
        }
	nodeList.add(pfor2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AEnquantoEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEnquantoEst penquantoestNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        PComando pcomandoNode3;
        pexplogicaNode2 = (PExplogica)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList6.get(0);

        penquantoestNode1 = new AEnquantoEst(pexplogicaNode2, pcomandoNode3);
        }
	nodeList.add(penquantoestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIfSeEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeEst pseestNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        PComando pcomandoNode3;
        pexplogicaNode2 = (PExplogica)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList6.get(0);

        pseestNode1 = new AIfSeEst(pexplogicaNode2, pcomandoNode3);
        }
	nodeList.add(pseestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AElseSeEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeEst pseestNode1;
        {
            // Block
        PExplogica pexplogicaNode2;
        PComando pcomandoNode3;
        PSeSen psesenNode4;
        pexplogicaNode2 = (PExplogica)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList6.get(0);
        psesenNode4 = (PSeSen)nodeArrayList7.get(0);

        pseestNode1 = new AElseSeEst(pexplogicaNode2, pcomandoNode3, psesenNode4);
        }
	nodeList.add(pseestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ASeSen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeSen psesenNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);

        psesenNode1 = new ASeSen(pcomandoNode2);
        }
	nodeList.add(psesenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANormalAvalieEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAvalieEst pavalieestNode1;
        {
            // Block
        PExp pexpNode2;
        PCasoM pcasomNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcasomNode3 = (PCasoM)nodeArrayList5.get(0);

        pavalieestNode1 = new ANormalAvalieEst(pexpNode2, pcasomNode3);
        }
	nodeList.add(pavalieestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AElseAvalieEst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAvalieEst pavalieestNode1;
        {
            // Block
        PExp pexpNode2;
        PCasoM pcasomNode3;
        PComando pcomandoNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcasomNode3 = (PCasoM)nodeArrayList5.get(0);
        pcomandoNode4 = (PComando)nodeArrayList8.get(0);

        pavalieestNode1 = new AElseAvalieEst(pexpNode2, pcasomNode3, pcomandoNode4);
        }
	nodeList.add(pavalieestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ACasoCasoM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoM pcasomNode1;
        {
            // Block
        PCasoM pcasomNode2;
        PValor pvalorNode3;
        PComando pcomandoNode4;
        pcasomNode2 = (PCasoM)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);
        pcomandoNode4 = (PComando)nodeArrayList5.get(0);

        pcasomNode1 = new ACasoCasoM(pcasomNode2, pvalorNode3, pcomandoNode4);
        }
	nodeList.add(pcasomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANadaCasoM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoM pcasomNode1;
        {
            // Block
        PVazio pvazioNode2;
        pvazioNode2 = (PVazio)nodeArrayList1.get(0);

        pcasomNode1 = new ANadaCasoM(pvazioNode2);
        }
	nodeList.add(pcasomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ADeclComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        PComando pcomandoNode3;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new ADeclComando(pdeclaracaoNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAtribuiComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PAtribui patribuiNode2;
        PComando pcomandoNode3;
        patribuiNode2 = (PAtribui)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new AAtribuiComando(patribuiNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PLeiaEst pleiaestNode2;
        PComando pcomandoNode3;
        pleiaestNode2 = (PLeiaEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new ALeiaComando(pleiaestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AEscreverComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PEscrevaEst pescrevaestNode2;
        PComando pcomandoNode3;
        pescrevaestNode2 = (PEscrevaEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new AEscreverComando(pescrevaestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PRepitaEst prepitaestNode2;
        PComando pcomandoNode3;
        prepitaestNode2 = (PRepitaEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new ARepitaComando(prepitaestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PParaEst pparaestNode2;
        PComando pcomandoNode3;
        pparaestNode2 = (PParaEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new AParaComando(pparaestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PEnquantoEst penquantoestNode2;
        PComando pcomandoNode3;
        penquantoestNode2 = (PEnquantoEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new AEnquantoComando(penquantoestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PSeEst pseestNode2;
        PComando pcomandoNode3;
        pseestNode2 = (PSeEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new ASeComando(pseestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAvalieComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PAvalieEst pavalieestNode2;
        PComando pcomandoNode3;
        pavalieestNode2 = (PAvalieEst)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandoNode1 = new AAvalieComando(pavalieestNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AVazioComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVazio pvazioNode2;
        pvazioNode2 = (PVazio)nodeArrayList1.get(0);

        pcomandoNode1 = new AVazioComando(pvazioNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {31, SHIFT, 1}, },
			{{-1, ERROR, 1}, {51, SHIFT, 3}, },
			{{-1, ERROR, 2}, {52, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {30, SHIFT, 4}, },
			{{-1, ERROR, 4}, {27, SHIFT, 5}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, },
			{{-1, ERROR, 5}, {51, SHIFT, 11}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 10}, {1, SHIFT, 32}, },
			{{-1, ERROR, 11}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, },
			{{-1, ERROR, 12}, {4, SHIFT, 37}, },
			{{-1, ERROR, 13}, {4, SHIFT, 38}, },
			{{-1, ERROR, 14}, {4, SHIFT, 39}, },
			{{-1, ERROR, 15}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 17}, {4, SHIFT, 42}, },
			{{-1, ERROR, 18}, {4, SHIFT, 43}, },
			{{-1, REDUCE, 6}, {6, SHIFT, 44}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 22}, {16, SHIFT, 46}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 31}, {42, SHIFT, 55}, },
			{{-1, ERROR, 32}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 36}, {2, SHIFT, 58}, },
			{{-1, ERROR, 37}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 38}, {51, SHIFT, 19}, },
			{{-1, ERROR, 39}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 40}, {36, SHIFT, 77}, },
			{{-1, ERROR, 41}, {23, SHIFT, 78}, },
			{{-1, ERROR, 42}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 43}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 44}, {48, SHIFT, 81}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 46}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 56}, {2, SHIFT, 83}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 84}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 59}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 60}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 63}, {5, SHIFT, 87}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 88}, {8, SHIFT, 89}, {9, SHIFT, 90}, },
			{{-1, REDUCE, 21}, {10, SHIFT, 91}, {11, SHIFT, 92}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 93}, },
			{{-1, ERROR, 68}, {5, SHIFT, 94}, },
			{{-1, ERROR, 69}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 70}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 71}, {8, SHIFT, 89}, {9, SHIFT, 90}, {12, SHIFT, 98}, {13, SHIFT, 99}, {14, SHIFT, 100}, {15, SHIFT, 101}, {17, SHIFT, 102}, {18, SHIFT, 103}, },
			{{-1, ERROR, 72}, {5, SHIFT, 104}, {19, SHIFT, 105}, },
			{{-1, REDUCE, 45}, {20, SHIFT, 106}, },
			{{-1, REDUCE, 48}, {21, SHIFT, 107}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 77}, {48, SHIFT, 108}, },
			{{-1, ERROR, 78}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 79}, {5, SHIFT, 110}, {19, SHIFT, 105}, },
			{{-1, ERROR, 80}, {5, SHIFT, 111}, {8, SHIFT, 89}, {9, SHIFT, 90}, },
			{{-1, ERROR, 81}, {7, SHIFT, 112}, },
			{{-1, ERROR, 82}, {2, SHIFT, 113}, {8, SHIFT, 89}, {9, SHIFT, 90}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 84}, {51, SHIFT, 19}, },
			{{-1, ERROR, 85}, {5, SHIFT, 115}, {8, SHIFT, 89}, {9, SHIFT, 90}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 87}, {2, SHIFT, 116}, },
			{{-1, ERROR, 88}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 89}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 90}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 91}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 92}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 93}, {51, SHIFT, 19}, },
			{{-1, ERROR, 94}, {2, SHIFT, 123}, },
			{{-1, ERROR, 95}, {5, SHIFT, 115}, {8, SHIFT, 89}, {9, SHIFT, 90}, {12, SHIFT, 98}, {13, SHIFT, 99}, {14, SHIFT, 100}, {15, SHIFT, 101}, {17, SHIFT, 102}, {18, SHIFT, 103}, },
			{{-1, ERROR, 96}, {5, SHIFT, 124}, {19, SHIFT, 105}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 98}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 99}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 100}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 101}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 102}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 103}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 104}, {22, SHIFT, 137}, },
			{{-1, ERROR, 105}, {4, SHIFT, 138}, {9, SHIFT, 139}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 106}, {4, SHIFT, 138}, {9, SHIFT, 139}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 107}, {4, SHIFT, 138}, {9, SHIFT, 139}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 108}, {23, SHIFT, 148}, {37, SHIFT, 149}, },
			{{-1, ERROR, 109}, {2, SHIFT, 152}, {19, SHIFT, 105}, },
			{{-1, ERROR, 110}, {38, SHIFT, 153}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 22}, {10, SHIFT, 91}, {11, SHIFT, 92}, },
			{{-1, REDUCE, 23}, {10, SHIFT, 91}, {11, SHIFT, 92}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 61}, {17, SHIFT, 156}, {18, SHIFT, 157}, },
			{{-1, ERROR, 125}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 126}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 59}, {8, SHIFT, 160}, {9, SHIFT, 161}, },
			{{-1, REDUCE, 31}, {10, SHIFT, 163}, {11, SHIFT, 164}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 57}, {8, SHIFT, 160}, {9, SHIFT, 161}, },
			{{-1, REDUCE, 58}, {8, SHIFT, 160}, {9, SHIFT, 161}, },
			{{-1, REDUCE, 56}, {8, SHIFT, 160}, {9, SHIFT, 161}, },
			{{-1, REDUCE, 53}, {8, SHIFT, 160}, {9, SHIFT, 161}, },
			{{-1, REDUCE, 54}, {8, SHIFT, 160}, {9, SHIFT, 161}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 138}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 139}, {4, SHIFT, 168}, {9, SHIFT, 139}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 28}, {2, REDUCE, 41}, {5, REDUCE, 41}, {19, REDUCE, 41}, {20, REDUCE, 41}, {21, REDUCE, 41}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 43}, {20, SHIFT, 106}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, {21, SHIFT, 107}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 148}, {48, SHIFT, 169}, },
			{{-1, ERROR, 149}, {48, SHIFT, 170}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 155}, {40, SHIFT, 172}, {41, SHIFT, 173}, {43, SHIFT, 174}, },
			{{-1, ERROR, 156}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 157}, {4, SHIFT, 69}, {9, SHIFT, 60}, {47, SHIFT, 70}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 158}, {5, SHIFT, 178}, {8, SHIFT, 89}, {9, SHIFT, 90}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 162}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 165}, {4, SHIFT, 125}, {9, SHIFT, 126}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, },
			{{-1, ERROR, 166}, {46, SHIFT, 181}, },
			{{-1, ERROR, 167}, {5, SHIFT, 182}, {8, SHIFT, 89}, {9, SHIFT, 90}, {12, SHIFT, 98}, {13, SHIFT, 99}, {14, SHIFT, 100}, {15, SHIFT, 101}, {17, SHIFT, 102}, {18, SHIFT, 103}, },
			{{-1, ERROR, 168}, {4, SHIFT, 59}, {9, SHIFT, 60}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, {51, SHIFT, 19}, },
			{{-1, ERROR, 169}, {22, SHIFT, 184}, },
			{{-1, ERROR, 170}, {23, SHIFT, 148}, },
			{{-1, ERROR, 171}, {40, SHIFT, 186}, {44, SHIFT, 187}, },
			{{-1, ERROR, 172}, {1, SHIFT, 189}, },
			{{-1, ERROR, 173}, {48, SHIFT, 33}, {49, SHIFT, 34}, {50, SHIFT, 35}, },
			{{-1, ERROR, 174}, {2, SHIFT, 191}, },
			{{-1, ERROR, 175}, {8, SHIFT, 89}, {9, SHIFT, 90}, {12, SHIFT, 98}, {13, SHIFT, 99}, {14, SHIFT, 100}, {15, SHIFT, 101}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 32}, {10, SHIFT, 163}, {11, SHIFT, 164}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 181}, {2, SHIFT, 192}, },
			{{-1, REDUCE, 29}, {2, REDUCE, 40}, {5, REDUCE, 40}, {19, REDUCE, 40}, {20, REDUCE, 40}, {21, REDUCE, 40}, },
			{{-1, ERROR, 183}, {5, SHIFT, 182}, {8, SHIFT, 89}, {9, SHIFT, 90}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 187}, {2, SHIFT, 195}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 190}, {1, SHIFT, 197}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 193}, {45, SHIFT, 198}, },
			{{-1, ERROR, 194}, {44, SHIFT, 199}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 196}, {43, SHIFT, 200}, },
			{{-1, REDUCE, 1}, {24, SHIFT, 12}, {25, SHIFT, 13}, {26, SHIFT, 14}, {27, SHIFT, 5}, {28, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 6}, {33, SHIFT, 7}, {34, SHIFT, 8}, {35, SHIFT, 17}, {39, SHIFT, 18}, {51, SHIFT, 19}, },
			{{-1, ERROR, 198}, {2, SHIFT, 202}, },
			{{-1, ERROR, 199}, {2, SHIFT, 203}, },
			{{-1, ERROR, 200}, {2, SHIFT, 204}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 74}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 20}, {111, 154}, },
			{{-1, 21}, {4, 9}, },
			{{-1, 56}, {84, 114}, },
			{{-1, 61}, {9, 22}, {15, 40}, {16, 22}, {21, 22}, {23, 22}, {24, 22}, {25, 22}, {26, 22}, {27, 22}, {28, 22}, {29, 22}, {30, 22}, {32, 57}, {38, 67}, {84, 57}, {93, 67}, {98, 127}, {99, 127}, {100, 127}, {101, 127}, {102, 127}, {103, 127}, {137, 22}, {153, 22}, {184, 22}, {186, 22}, {189, 22}, {197, 22}, },
			{{-1, 62}, {11, 36}, {98, 128}, {99, 128}, {100, 128}, {101, 128}, {102, 128}, {103, 128}, {105, 140}, {106, 140}, {107, 140}, {126, 128}, {139, 140}, {162, 128}, {165, 128}, {173, 190}, },
			{{-1, 10}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 68}, {93, 122}, },
			{{-1, 25}, },
			{{-1, 63}, {88, 117}, },
			{{-1, 71}, {37, 64}, {43, 80}, {46, 82}, {59, 85}, {69, 95}, {88, 64}, {125, 158}, {138, 167}, {156, 175}, {157, 175}, {168, 183}, },
			{{-1, 65}, {89, 118}, {90, 119}, },
			{{-1, 66}, {60, 86}, {91, 120}, {92, 121}, {139, 86}, },
			{{-1, 129}, {99, 132}, {100, 133}, {101, 134}, {102, 135}, {103, 136}, },
			{{-1, 162}, },
			{{-1, 130}, {162, 179}, },
			{{-1, 165}, },
			{{-1, 131}, {105, 141}, {106, 143}, {107, 145}, {126, 159}, {139, 159}, {165, 180}, },
			{{-1, 96}, {39, 72}, {42, 79}, {78, 109}, },
			{{-1, 73}, {105, 142}, },
			{{-1, 74}, {106, 144}, },
			{{-1, 146}, },
			{{-1, 75}, {70, 97}, {107, 147}, },
			{{-1, 76}, {156, 176}, {157, 177}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 150}, {170, 185}, },
			{{-1, 151}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 188}, },
			{{-1, 30}, },
			{{-1, 155}, },
			{{-1, 31}, {16, 41}, {21, 45}, {23, 47}, {24, 48}, {25, 49}, {26, 50}, {27, 51}, {28, 52}, {29, 53}, {30, 54}, {137, 166}, {153, 171}, {184, 193}, {186, 194}, {189, 196}, {197, 201}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'const', 'real', 'inteiro', 'caractere'",
			"expecting: ':'",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'fim.', identificador",
			"expecting: numero int, numero real, string",
			"expecting: '('",
			"expecting: 'ate', 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', identificador",
			"expecting: ',', ';', ')', '[', '+', '-', '*', '/', '<', '<=', '>', '>=', '<-', '=', '<>', 'e', 'ou', 'xor', 'de'",
			"expecting: 'ate', 'senao', 'caso', 'fim.', 'fim avalie', 'fim se', 'fim para', 'fim enquanto'",
			"expecting: 'ate', 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'senao', 'caso', 'fim.', 'fim avalie', 'fim se', 'fim para', 'fim enquanto', identificador",
			"expecting: '<-'",
			"expecting: 'fim.'",
			"expecting: ',', ':', ';', ')', '+', '-', '*', '/', '<', '<=', '>', '>=', '=', '<>', 'e', 'ou', 'xor'",
			"expecting: ';'",
			"expecting: '(', '-', numero int, numero real, string, identificador",
			"expecting: '(', '-', 'nao', numero int, numero real, string, identificador",
			"expecting: 'de'",
			"expecting: 'ate'",
			"expecting: numero int",
			"expecting: ',', ';'",
			"expecting: ',', ';', ')', '+', '-', '*', '/', '<', '<=', '>', '>=', '=', '<>'",
			"expecting: ')'",
			"expecting: ',', ')', '+', '-'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '<', '<=', '>', '>=', '=', '<>'",
			"expecting: ')', 'e'",
			"expecting: ';', ')', 'e', 'ou'",
			"expecting: ';', ')', 'e', 'ou', 'xor'",
			"expecting: ')', '+', '-'",
			"expecting: ']'",
			"expecting: ';', '+', '-'",
			"expecting: ')', '+', '-', '<', '<=', '>', '>=', '=', '<>'",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: ';', 'e'",
			"expecting: 'entao'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: ',', ';', ')', '+', '-', '*', '/', '<', '<=', '>', '>=', '<-', '=', '<>', 'e', 'ou', 'xor', 'de'",
			"expecting: ';', ')', '=', '<>', 'e', 'ou', 'xor'",
			"expecting: '(', '-', numero int, numero real, string",
			"expecting: ';', ')', '+', '-', 'e', 'ou', 'xor'",
			"expecting: ';', ')', '+', '-', '*', '/', 'e', 'ou', 'xor'",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'fim enquanto', identificador",
			"expecting: ';', ')', '+', '-', '*', '/', '<', '<=', '>', '>=', '=', '<>', 'e', 'ou', 'xor'",
			"expecting: ';', ')', 'e'",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'senao', 'fim se', identificador",
			"expecting: 'fim enquanto'",
			"expecting: 'senao', 'fim se'",
			"expecting: '+', '-', '<', '<=', '>', '>='",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'fim para', identificador",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'fim se', identificador",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'fim avalie', identificador",
			"expecting: 'fim para'",
			"expecting: 'fim se'",
			"expecting: 'fim avalie'",
			"expecting: 'escreva', 'leia', 'enquanto', 'const', 'para', 'repita', 'real', 'inteiro', 'caractere', 'se', 'avalie', 'senao', 'caso', 'fim avalie', identificador",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 5, 6, 5, 7, 8, 8, 8, 1, 9, 8, 8, 10, 11, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 14, 1, 15, 15, 15, 16, 17, 1, 18, 19, 20, 18, 17, 21, 11, 17, 11, 11, 11, 11, 11, 11, 11, 11, 2, 16, 22, 12, 17, 17, 23, 23, 24, 25, 23, 23, 26, 24, 18, 18, 27, 28, 29, 30, 30, 30, 21, 18, 28, 31, 32, 33, 12, 1, 31, 23, 16, 17, 17, 17, 17, 17, 1, 16, 34, 28, 30, 17, 17, 17, 17, 17, 17, 35, 18, 18, 18, 36, 37, 38, 39, 40, 12, 16, 23, 12, 24, 23, 23, 23, 23, 24, 12, 41, 17, 42, 43, 44, 43, 44, 44, 43, 43, 43, 43, 43, 45, 18, 17, 46, 47, 29, 29, 30, 30, 30, 30, 21, 21, 12, 12, 12, 48, 39, 39, 18, 18, 31, 44, 42, 42, 42, 42, 42, 42, 49, 34, 17, 35, 20, 50, 5, 7, 16, 51, 30, 30, 44, 44, 44, 16, 46, 31, 52, 12, 53, 16, 12, 54, 5, 12, 12, 55, 56, 12, 57, 58, 16, 16, 16, 39, 12, 12, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
