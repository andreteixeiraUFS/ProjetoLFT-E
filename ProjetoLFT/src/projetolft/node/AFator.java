/* This file was generated by SableCC (http://www.sablecc.org/). */

package projetolft.node;

import projetolft.analysis.*;

@SuppressWarnings("nls")
public final class AFator extends PFator
{
    private TParenEsq _parenEsq_;
    private PExp _exp_;
    private TParenDir _parenDir_;

    public AFator()
    {
        // Constructor
    }

    public AFator(
        @SuppressWarnings("hiding") TParenEsq _parenEsq_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TParenDir _parenDir_)
    {
        // Constructor
        setParenEsq(_parenEsq_);

        setExp(_exp_);

        setParenDir(_parenDir_);

    }

    @Override
    public Object clone()
    {
        return new AFator(
            cloneNode(this._parenEsq_),
            cloneNode(this._exp_),
            cloneNode(this._parenDir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFator(this);
    }

    public TParenEsq getParenEsq()
    {
        return this._parenEsq_;
    }

    public void setParenEsq(TParenEsq node)
    {
        if(this._parenEsq_ != null)
        {
            this._parenEsq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenEsq_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TParenDir getParenDir()
    {
        return this._parenDir_;
    }

    public void setParenDir(TParenDir node)
    {
        if(this._parenDir_ != null)
        {
            this._parenDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenDir_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._parenEsq_)
            + toString(this._exp_)
            + toString(this._parenDir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._parenEsq_ == child)
        {
            this._parenEsq_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._parenDir_ == child)
        {
            this._parenDir_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._parenEsq_ == oldChild)
        {
            setParenEsq((TParenEsq) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._parenDir_ == oldChild)
        {
            setParenDir((TParenDir) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
