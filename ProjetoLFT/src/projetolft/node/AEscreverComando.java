/* This file was generated by SableCC (http://www.sablecc.org/). */

package projetolft.node;

import projetolft.analysis.*;

@SuppressWarnings("nls")
public final class AEscreverComando extends PComando
{
    private PEscrevaEst _escrevaEst_;
    private PComando _comando_;

    public AEscreverComando()
    {
        // Constructor
    }

    public AEscreverComando(
        @SuppressWarnings("hiding") PEscrevaEst _escrevaEst_,
        @SuppressWarnings("hiding") PComando _comando_)
    {
        // Constructor
        setEscrevaEst(_escrevaEst_);

        setComando(_comando_);

    }

    @Override
    public Object clone()
    {
        return new AEscreverComando(
            cloneNode(this._escrevaEst_),
            cloneNode(this._comando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEscreverComando(this);
    }

    public PEscrevaEst getEscrevaEst()
    {
        return this._escrevaEst_;
    }

    public void setEscrevaEst(PEscrevaEst node)
    {
        if(this._escrevaEst_ != null)
        {
            this._escrevaEst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._escrevaEst_ = node;
    }

    public PComando getComando()
    {
        return this._comando_;
    }

    public void setComando(PComando node)
    {
        if(this._comando_ != null)
        {
            this._comando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._escrevaEst_)
            + toString(this._comando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._escrevaEst_ == child)
        {
            this._escrevaEst_ = null;
            return;
        }

        if(this._comando_ == child)
        {
            this._comando_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._escrevaEst_ == oldChild)
        {
            setEscrevaEst((PEscrevaEst) newChild);
            return;
        }

        if(this._comando_ == oldChild)
        {
            setComando((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
