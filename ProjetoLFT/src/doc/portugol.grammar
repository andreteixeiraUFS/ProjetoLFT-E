/*Universidade Federal de Sergipe
Linguagens Formais e Tradutores
Projeto Compilador - Gramática Portugol
Alunos: André Teixeira*/

Package projetolft; // package name

Helpers
	digitos = ['0' .. '9'] ;
	letras = [['a' .. 'z'] + ['A' .. 'Z']];  
	underline = '_';

	unicode_input_character = [0..0xffff];
	ht  = 9;
	lf  = 10;
	ff  = 12;
	cr  = 13;
	line_termoinator = lf | cr | cr lf;
	input_character = [unicode_input_character - [cr + lf]];
	branco = ' ';
	caracteres_validos = [input_character - [''' + '\']];
 
States
	normal,  
	comentado;

Tokens

//separadores
	{normal}virgula = ',' ;
	{normal}dois_pontos = ':' ;
	{normal}ponto_virgula = ';' ;
	{normal}ponto = '.' ;
	{normal}paren_esq = '(' ;
	{normal}paren_dir = ')' ;
	{normal}colchete_esq = '[';
	{normal}colchete_dir = ']';

//simbolos aritmeticos
	{normal}mais = '+' ;
	{normal}menos = '-' ;
	{normal}multiplicacao = '*' ;
	{normal}div_int = '/';
	{normal}menor_que = '<';
	{normal}menor_igual = '<=';
	{normal}maior_que = '>';
	{normal}maior_igual = '>=';
	{normal}atribuicao = '<-';
	{normal}igual = '=';
	{normal}diferente = '<>';
	{normal}e = 'e';
	{normal}ou = 'ou';
	{normal}xor = 'xor';

//palavras reservadas  
	{normal}faca = 'faca';
	{normal}ate = 'ate';
	{normal}escreva = 'escreva';
	{normal}leia = 'leia';
	{normal}enquanto = 'enquanto';
	{normal}constante = 'const';
	{normal}para = 'para';
	{normal}repita = 'repita';
	{normal}inicio = 'inicio';
	{normal}programa = 'programa';
	{normal}real= 'real';
	{normal}inteiro = 'inteiro';
	{normal}caractere = 'caractere';
	{normal}se = 'se';
	{normal}de = 'de';
	{normal}passo = 'passo';
	{normal}entao = 'entao';
	{normal}avalie = 'avalie';
	{normal}senao = 'senao';
	{normal}caso = 'caso';
	{normal}fim_p = 'fim.';
	{normal}fim_avalie = 'fim avalie';
	{normal}fim_se  = 'fim se';
	{normal}fim_para = 'fim para';
	{normal}fim_enquanto = 'fim enquanto';
	{normal}nao = 'nao';

	{normal}blanks = branco+| cr lf +| cr+ | lf +|ht+;
	
	{normal}numero_int= digitos+;
	{normal}numero_real = digitos+'.'digitos+;

	{normal} string ='''caracteres_validos*''';
	
	{normal}identificador = (letras (letras | digitos|underline)*)  | (underline (letras | digitos|underline)*);

	{normal}comentario_linha = '//' input_character* line_termoinator?;
	{normal->comentado, comentado} comentado_a = '/*';
	{comentado} corpo = [unicode_input_character -['*' + '/']]*;
	{comentado} estrela = '*';
	{comentado} barra = '/';
	{comentado} comentado_final = '*/';



Ignored Tokens

comentado_a, comentado_final, corpo, estrela, barra,
comentario_linha,
blanks;

Productions

//estrutura básica do código
programa_est {-> programa_est} = programa identificador inicio declaracao comando  fim_p {-> New programa_est (identificador, inicio , declaracao , comando)};

//conjunto de declarações  (s = simples, m  = multipla)
declaracao {-> declaracao} = {declm} tipo_variavel dois_pontos decl_m ponto_virgula {-> New declaracao.declm(tipo_variavel, decl_m)}
|{const} constante identificador valor ponto_virgula   								{-> New declaracao.const (constante, identificador, valor)} ;

decl_m 	{-> decl_m} = {decl_m} variavel virgula decl_m  							{-> New decl_m.decl_m (variavel, decl_m)}
		|{var} variavel 															{-> New decl_m.var (variavel)}; 

//definição de uma variavel  (n=normal, v =vetor)
variavel {-> variavel} = {var_n} identificador 						{-> New variavel.var_n (identificador)}
		| {var_v} identificador colchete_esq numero_int colchete_dir{-> New variavel.var_v (identificador, numero_int)};


//Tipo de dados
valor {-> valor} =  {num_int} numero_int    {-> New valor.num_int (numero_int)}
				|	{num_real} numero_real  {-> New valor.num_real (numero_real)}
				| 	{char} string  			{-> New valor.char (string)};   

//Tipo das variaveis
tipo_variavel {-> tipo_variavel} = {numero_real}real{-> New tipo_variavel.numero_real (real)}
			| {num_int} inteiro 					{-> New tipo_variavel.num_int(inteiro)}
			| {caractere} caractere 				{-> New tipo_variavel.caractere (caractere)};

//Atribuição			 
atribui {-> atribui} = variavel atribuicao exp ponto_virgula {-> New atribui (variavel, exp)}; 
 
//Leia			 
leia_est{-> leia_est} = leia paren_esq leia_m paren_dir ponto_virgula  	{-> New leia_est (leia_m)};

leia_m 	{-> leia_m} = {leia_m} variavel virgula leia_m 					{-> New leia_m.leia_m( variavel, leia_m)}
					| {var} variavel 									{-> New leia_m.var (variavel)};

//Escreva
escreva_est {-> escreva_est} = escreva paren_esq escreva_m paren_dir ponto_virgula  {-> New escreva_est (escreva_m)};

escreva_m {-> escreva_m} = {esc_m} exp virgula escreva_m 							{-> New escreva_m.esc_m (exp, escreva_m)}
						|  {exp} exp 												{-> New escreva_m.exp (exp)}; 

//exp normal, obtida na internet
exp {-> exp} = {termo} termo 						{-> termo.exp}
			|  {mais} exp mais termo 				{-> New exp.mais(exp,termo.exp)}
			|  {menos} exp menos termo 				{-> New exp.menos(exp,termo.exp)};

termo {-> exp} =  {fator} fator 					{-> fator.exp}
				| {mult} termo multiplicacao fator 	{-> New exp.mult(termo.exp,fator.exp)}
				| {div} termo div_int fator 		{-> New exp.div(termo.exp,fator.exp)};

fator {-> exp} =  {variavel} variavel 				{-> New exp.variavel(variavel)}
				| {valor} valor 					{-> New exp.valor(valor)}
				| {exp} paren_esq exp paren_dir 	{-> exp}
				| {menos_exp} menos fator 			{-> New exp.menos_exp(menos,fator.exp)};


//outra exp para auxiliar na geraçao de exp logica
exp_a { -> exp_a} =  {termo} termo_a     					{-> New exp_a.termo (termo_a)}
					|{mais} exp_a soma_a termo_a    		{-> New exp_a.mais (exp_a, soma_a, termo_a)} 
					|{var} variavel 						{-> New exp_a.var (variavel)}; 

soma_a { -> soma_a} = {mais } mais   						{-> New soma_a.mais (mais)}
					| {menos} menos  						{-> New soma_a.menos (menos)};

termo_a {-> termo_a} ={fat} fator_a 						{-> New termo_a.fat (fator_a)}
					| {mult} termo_a mult_a fator_a 		{-> New termo_a.mult (termo_a, mult_a, fator_a)};

mult_a {-> mult_a} = {mult} multiplicacao 					{-> New mult_a.mult (multiplicacao)}
					|{div}  div_int 						{-> New mult_a.div (div_int)} ;

fator_a {-> fator_a} = {expressao} paren_esq exp paren_dir  {-> New fator_a.expressao (exp)}
					|  {valor} valor 						{-> New fator_a.valor (valor)}
					|  {menos} menos fator_a 				{-> New fator_a.menos (menos, fator_a)};


//Fonte da precedencia http://www.ime.usp.br/~pf/algoritmos/apend/precedence.html
//1º precedencia (e)
explogica {-> explogica} = {multiple} explogica e exp_ou    {-> New explogica.multiple (explogica, e , exp_ou)}
						|  {ex} explogica e fator_a   		{-> New explogica.ex (explogica, e , fator_a)}          
						|  {single} exp_ou  				{-> New explogica.single (exp_ou)} ; 

//2º precedencia (ou) 
exp_ou {-> exp_ou} = {multiple} exp_ou ou exp_xor 	{-> New exp_ou.multiple (exp_ou, ou, exp_xor)}
					|{expp} exp_ou ou fator_a  		{-> New exp_ou.expp (exp_ou, ou, fator_a)}
					|{single} exp_xor 				{-> New exp_ou.single (exp_xor)}; 

// 3º precedencia (xor), chama o caso base
exp_xor = {multiple} exp_xor xor aux_xor {-> New exp_xor.multiple (exp_xor, xor , aux_xor)}
		| {fat} expl_fator 				 {-> New exp_xor.fat(expl_fator)};   
		
aux_xor = {single} expl_fator {-> New aux_xor.single (expl_fator)}
		| {fat} fator_a 	  {-> New aux_xor.fat(fator_a)}; 

//caso base
expl_fator {-> expl_fator} =  {exig} exp igual exp_a 		{-> New expl_fator.exig (exp, exp_a)}
							| {exdif} exp diferente exp_a 	{-> New expl_fator.exdif (exp, exp_a)}
							| {outro} expl_termo 			{-> New expl_fator.outro(expl_termo)};  
							
expl_termo { -> expl_termo} = {mi} exp maior_igual exp_a 										{-> New expl_termo.mi (exp, exp_a)}
							| {mei} exp menor_igual exp_a 										{-> New expl_termo.mei (exp, exp_a)}
							| {mq} exp maior_que exp_a 											{-> New expl_termo.mq (exp, exp_a)}
							| {meq} exp menor_que exp_a 										{-> New expl_termo.meq (exp, exp_a)}
							| {single} nao expl_fator 											{-> New expl_termo.single (nao, expl_fator)}
							| {unica} paren_esq explogica paren_dir 				  			{-> New expl_termo.unica (explogica)}
							| {multipla_ig} paren_esq explogica paren_dir igual expl_termo 		{-> New expl_termo.multipla_ig (explogica, expl_termo)}
							| {multipla_dif} paren_esq explogica paren_dir diferente expl_termo {-> New expl_termo.multipla_dif (explogica, expl_termo)};							
							
//Repita
repita_est {-> repita_est} = repita comando ate explogica ponto_virgula {-> New repita_est (comando, explogica)};

//Para (for1 e for2 definem as variações de tipos do para)
para_est {-> para_est} =  {for} para variavel de numero_int for1 		{-> New para_est.for (variavel, numero_int, for1)}
						| {for_passo} para variavel de numero_int for2 	{-> New para_est.for_passo (variavel, numero_int, for2)}; 
						
for1 {-> for1} = ate numero_int faca comando fim_para ponto_virgula	{-> New for1( numero_int, comando)} ;

for2 {-> for2} = passo numero_int for1 								{-> New for2( numero_int, for1)} ;

//Enquanto
enquanto_est {-> enquanto_est}= enquanto paren_esq explogica paren_dir faca comando fim_enquanto ponto_virgula {-> New enquanto_est (explogica, comando)};

//Estrutura se ou se-senao  (se_sen = se com senao)
se_est {-> se_est} = {if} se paren_esq explogica paren_dir entao comando fim_se ponto_virgula  	{-> New se_est.if (explogica, comando)}
					|{else} se paren_esq  explogica paren_dir entao comando se_sen 				{-> New se_est.else (explogica, comando, se_sen)};
					
se_sen {->se_sen} = senao comando fim_se ponto_virgula 											{-> New se_sen (comando)};

//Estrutura avalie (caso_m = multiplos comandos em um caso)
avalie_est {-> avalie_est} = {normal} avalie paren_esq exp paren_dir caso_m fim_avalie ponto_virgula   						 {-> New avalie_est.normal (exp, caso_m)}
							|{else} avalie paren_esq exp paren_dir caso_m senao dois_pontos comando fim_avalie ponto_virgula {-> New avalie_est.else (exp, caso_m, comando)}; 

caso_m  {-> caso_m} = {caso} caso_m caso valor dois_pontos comando 	 {-> New caso_m.caso (caso_m, valor, comando)}
					| ;			

//Comandos válidos
comando {-> comando} = {decl} declaracao comando 		{-> New comando.decl (declaracao, comando)}
					|  {atribui} atribui comando 		{-> New comando.atribui (atribui, comando)}
					|  {leia} leia_est comando 			{-> New comando.leia (leia_est, comando)}
					|  {escrever} escreva_est comando 	{-> New comando.escrever (escreva_est, comando)}
					|  {repita} repita_est comando 		{-> New comando.repita (repita_est, comando)}
					|  {para} para_est comando 			{-> New comando.para (para_est, comando)}
					|  {enquanto} enquanto_est comando 	{-> New comando.enquanto (enquanto_est, comando)}
					|  {se} se_est comando 				{-> New comando.se(se_est, comando)} 
					|  {avalie}avalie_est comando 		{-> New comando.avalie (avalie_est, comando)} | ;
					
Abstract Syntax Tree

programa_est = identificador inicio declaracao comando;

declaracao = 	{declm} tipo_variavel decl_m 
|				{const} constante identificador valor;
decl_m = 		{decl_m} variavel decl_m
| 				{var} variavel; 

variavel = 	{var_n} identificador 
| 			{var_v} identificador numero_int;

comando = 	{decl} declaracao comando
|			{atribui} atribui comando
|			{leia} leia_est comando
|			{escrever} escreva_est comando
|			{repita} repita_est comando
|			{para} para_est comando
|			{enquanto} enquanto_est comando
|			{se} se_est comando
|			{avalie}avalie_est comando 
| ;

valor = {num_int} numero_int
|		{num_real} numero_real
| 		{char} string;   

//Tipo das variaveis
tipo_variavel = {numero_real}real 
|				{num_int} inteiro 
|				{caractere} caractere;

//Atribuição			 
atribui = variavel exp; 
 
//Leia			 
leia_est =  leia_m ;
leia_m = {leia_m} variavel  leia_m
| 		 {var} variavel;

//Escreva
escreva_est = escreva_m ;
escreva_m =  {esc_m} exp escreva_m 
|			 {exp} exp;

exp  = {mais} 	[l]:exp  [r]:exp
	 | {menos} 	[l]:exp  [r]:exp
	 | {mult} 	[l]:exp  [r]:exp
	 | {div} 	[l]:exp  [r]:exp
	 | {variavel} variavel
	 | {valor} valor
	 | {menos_exp} menos exp;
	 
  
//outra exp para auxiliar na geraçao de exp logica
exp_a =  {termo} termo_a
|  {mais} exp_a soma_a termo_a
| {var} variavel; 

soma_a= {mais } mais
|  {menos} menos;

termo_a =  {fat} fator_a 
| {mult} termo_a mult_a fator_a;

mult_a = {mult} multiplicacao 
|  {div}  div_int ;

fator_a = {expressao} exp 
| {valor} valor | {menos} menos fator_a;

//explogica
explogica = {multiple} explogica e exp_ou  
| 			{ex} explogica e fator_a             
| 			{single} exp_ou ; //1º precedencia

exp_ou = {multiple} exp_ou ou exp_xor 
| 		 {expp} exp_ou ou fator_a
| 		 {single} exp_xor ; //2º precedencia (ou)

exp_xor = {multiple} exp_xor xor aux_xor
|		  {fat} expl_fator;   
aux_xor = {single} expl_fator
| 		  {fat}fator_a; // 3º precedencia (xor), chama o caso base
//caso base
expl_fator =  {exig}  [l]:exp  [r]:exp_a
| 			  {outro} expl_termo 
|			  {exdif} [l]:exp  [r]:exp_a;

expl_termo = {mi} 	[l]:exp  [r]:exp_a
|			 {mei} 	[l]:exp  [r]:exp_a
|			 {mq} 	[l]:exp  [r]:exp_a
|			 {meq} 	[l]:exp  [r]:exp_a 
|			 {single} nao expl_fator 
|			 {unica}  explogica 
| 			 {multipla_ig}  explogica  expl_termo
| 			 {multipla_dif}  explogica  expl_termo;

//Repita
repita_est = comando  explogica;

//Para (for1 e for2 definem as variações de tipos do para)
para_est =  {for} variavel numero_int for1
| 			{for_passo}variavel  numero_int for2 ; 
for1 = numero_int comando;
for2 = numero_int for1;

//Enquanto
enquanto_est = explogica  comando ;

//Estrutura se ou se-senao  (se_sen = se com senao)
se_est = {if}explogica  comando 
|		 {else} explogica comando se_sen;
se_sen = comando ;

//Estrutura avalie (caso_m = multiplos comandos em um caso)
avalie_est = {normal} exp caso_m    
|			 {else} exp caso_m  comando ; 
caso_m = {caso} caso_m  valor comando
| ;		